.. _csharp-aggregation-unwind:

======
Unwind
======

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, transform, pipeline

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Unwind
------

Use the ``unwind()`` method to create an :manual:`$unwind </reference/operator/aggregation/unwind/>`
pipeline stage to deconstruct an array field from input documents, creating
an output document for each array element.

The following example creates a document for each element in the ``sizes`` array:

.. literalinclude:: /includes/aggregation/Builders.cs
   :start-after: // begin unwindStage
   :end-before: // end unwindStage
   :language: csharp
   :dedent:

To preserve documents that have missing or ``null``
values for the array field, or where array is empty:


.. literalinclude:: /includes/aggregation/Builders.cs
   :start-after: // begin unwindPreserve
   :end-before: // end unwindPreserve
   :language: csharp
   :dedent:

To include the array index, in this example in a field called ``"position"``:

.. literalinclude:: /includes/aggregation/Builders.cs
   :start-after: // begin unwindIndex
   :end-before: // end unwindIndex
   :language: csharp
   :dedent:

$unwind
~~~~~~~

The ``$unwind`` aggregation stage deconstructs a specified array field and returns
a document for each element in that array.

Select the :guilabel:`Method Syntax` or :guilabel:`Query Syntax` tab to see how 
to generate an ``$unwind`` stage using LINQ:

.. tabs::

   .. tab:: Method Syntax
      :tabid: method-syntax

      .. code-block:: csharp
         :emphasize-lines: 3

         var query = queryableCollection
             .Where(r => r.Name == "The Movable Feast")
             .SelectMany(r => r.Grades);

   .. tab:: Query Syntax
      :tabid: query-syntax

      .. code-block:: csharp
         :emphasize-lines: 3

         var query = from r in queryableCollection
             where r.Name == "The Movable Feast"
             from grade in r.Grades
             select grade;

The query in the preceding example finds the document where the ``Name`` field 
has the value "The Movable Feast." Then, for each element in this document's 
``Grades`` array, the query returns a new document. The result contains the
following documents:

.. code-block:: json

   { "date" : ISODate("2014-11-19T00:00:00Z"), "grade" : "A", "score" : 11 }
   { "date" : ISODate("2013-11-14T00:00:00Z"), "grade" : "A", "score" : 2 }
   { "date" : ISODate("2012-12-05T00:00:00Z"), "grade" : "A", "score" : 13 }
   { "date" : ISODate("2012-05-17T00:00:00Z"), "grade" : "A", "score" : 11 }

Nested Statements
+++++++++++++++++

You can chain or nest ``Select`` and ``SelectMany`` statements to unwind nested
arrays. Consider a collection that contains documents with a **new** schema. These
documents contain a ``restaurants`` field, which holds an array of documents 
represented by the ``Restaurant`` class. The documents within the array each have
a ``grades`` field that holds an array of documents represented by
the ``Grade`` class. The following code is an example of a single document in
this collection:

.. code-block:: json

   { 
      "_id": { "$oid": ... },
      "restaurants": [
         {
            "_id": { ... } ,
            "address": { ... },
            "name": "Tov Kosher Kitchen",
            "grades": [
               { 
                  "date" : ISODate("2014-11-24T00:00:00Z"), 
                  "grade" : "Z", 
                  "score" : 20.0 
               }, 
               { 
                  "date" : ISODate("2013-01-17T00:00:00Z"), 
                  "grade" : "A", 
                  "score" : 13.0 
               }
            ]
            ...
         },
         {
            "_id": { ... } ,
            "address": { ... },
            "name": "Harriet's Kitchen",
            "grades": [ 
               { 
                  "date" : ISODate("2014-04-19T00:00:00Z"), 
                  "grade" : "B", 
                  "score" : 12.0 
               }
             ],
            ...
         },
         ...
      ]
   }

You can nest ``SelectMany`` statements within ``SelectMany`` or ``Select``
statements. The following example nests a ``SelectMany`` statement within a
``Select`` statement to retrieve an array from each document in the collection.
Each array holds all grade objects from all restaurants in each document.

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-examples/linq.cs
      :language: csharp
      :start-after: start-nested-SelectMany
      :end-before: end-nested-SelectMany

   .. output::
      :visible: false
      :language: json

      // output for first document in collection
      [
         { "date" : ISODate("2014-11-24T00:00:00Z"), 
            "grade" : "Z", 
            "score" : 20.0 
         }, 
         { "date" : ISODate("2013-01-17T00:00:00Z"), 
            "grade" : "A", 
            "score" : 13.0 
         }, 
         { 
            "date" : ISODate("2014-04-19T00:00:00Z"), 
            "grade" : "B", 
            "score" : 12.0 
         },
         ...
      ], 
      // output for second document in collection
      [
         ...
      ]