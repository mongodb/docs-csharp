.. _csharp-serialization:

=============
Serialization
=============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn about serialization with the {+driver-long+}.
Serialization is the process of mapping a C# object to and from a BSON document.

Serializer Registry
-------------------

The serializer registry is an implementation of ``IBsonSerializerRegistry``
that contains all registered serializers. You can access the serializer registry
with the ``SerializerRegistry`` property of the ``BsonSerializer``
class.

.. important::

   The serializer registry is a global registry. This means that you cannot use
   multiple registries in a single application.

Serialization Provider
----------------------

A serialization provider allows you to provide serializers to your
serialization registry. The serialization provider should be registered as early
as possible in your application to ensure that the serializers are used by the
registry. Your serialization provider must implement the
``IBsonSerializationProvider`` interface. 

Example
~~~~~~~

The following example implements a serialization provider. The provider has a
``GetSerializer`` method that returns a serializer based on the type of the
input. If the method input is an ``int`` it returns a custom ``Int32``
serializer, otherwise it returns ``null`` so that it can be handled by another
provider. 

.. code-block:: csharp
   
   class MyProvider : IBsonSerializationProvider
   {
       public IBsonSerializer GetSerializer(Type type)
       {
           if (type == typeof(int))
           {
               return new MyInt32Serializer();
           }        
   
           return null;
       }
   }

Serializers
-----------

Serializers are classes that handle the translation of C# objects to and
from BSON documents. Most serializers implement the ``IBsonSerializer``
interface. The {+driver-short+} has many built-in serializers made to handle
primitive types, collection types, and custom classes.

For a full list of available serializers, see the
`Serializers namespace API documentation <https://mongodb.github.io/mongo-csharp-driver/2.18/apidocs/html/N_MongoDB_Bson_Serialization_Serializers.htm>`__.

Custom Serializers
~~~~~~~~~~~~~~~~~~

In some cases, you may need to implement a custom serializer. When creating a
custom serializer, your class should inherit from ``SerializerBase<T>`` and
override the ``Deserialize`` and ``Serialize`` methods. 

The following code example shows how to implement a custom serializer that reads
an ``Int32``:

.. code-block:: csharp

   class MyInt32Serializer : SerializerBase<int>
   {
       public override int Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)
       {
           return context.Reader.ReadInt32();
       }
   
       public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, int value)
       {
           context.Writer.WriteInt32(value);
       }
   }

.. important:: 

   The preceding code example shows an overly simplistic serializer. When
   creating a custom serializer ensure it handles all standard and edge cases.

.. tip::

   The {+driver-short+} provides a built-in `Int32Serializer 
   <{+api-root+}/T_MongoDB_Bson_Serialization_Serializers_Int32Serializer.htm>`__.

Opt-in Interfaces
-----------------

The {+driver-short+} has several opt-in interfaces that you can implement with
your custom serializer based on type of data your serializer handles.

IBsonIdProvider
~~~~~~~~~~~~~~~

The `IBsonIdProvider
<{+api-root+}/T_MongoDB_Bson_Serialization_IBsonIdProvider.htm>`__
interface provides the ``GetDocumentId`` and ``SetDocumentId``
methods, and is useful if your class uses an Id type other than ``ObjectId``.

IBsonDocumentSerializer
~~~~~~~~~~~~~~~~~~~~~~~

Implementing the `IBsonDocumentSerializer
<{+api-root+}/T_MongoDB_Bson_Serialization_IBsonDocumentSerializer.htm>`__
interface enables the driver to access your class's member
information. This allows the driver to properly construct type-safe queries using a
custom serializer.

IBsonArraySerializer
~~~~~~~~~~~~~~~~~~~~

Implementing the `IBsonArraySerializer
<{+api-root+}/T_MongoDB_Bson_Serialization_IBsonArraySerializer.htm>`__
interface enables the driver to access serialization information for individual
items in an array. 

Additional Information
----------------------

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `IBsonSerializerRegistry <{+api-root+}/P_MongoDB_Bson_Serialization_BsonSerializer_SerializerRegistry.htm>`__
- `SerializerRegistry <{+api-root+}/P_MongoDB_Bson_Serialization_BsonSerializer_SerializerRegistry.htm>`__
- `BsonSerializer <{+api-root+}/T_MongoDB_Bson_Serialization_BsonSerializer.htm>`__
- `IBsonSerializationProvider <{+api-root+}/T_MongoDB_Bson_Serialization_IBsonSerializationProvider.htm>`__
- `GetSerializer <{+api-root+}/M_MongoDB_Bson_Serialization_IBsonSerializationProvider_GetSerializer.htm>`__
- `IBsonSerializer <{+api-root+}/T_MongoDB_Bson_Serialization_IBsonSerializer.htm>`__
- `SerializerBase<T> <{+api-root+}/T_MongoDB_Bson_Serialization_Serializers_SerializerBase_1.htm>`__