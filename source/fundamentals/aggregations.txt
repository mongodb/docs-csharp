.. _csharp-aggregations:

===========
Aggregation
===========

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: code example, transform, pipeline

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to perform
**aggregation operations**.

Aggregation operations process data in your MongoDB collections and
return computed results. The MongoDB Aggregation framework is modeled on the 
concept of data processing pipelines. Documents enter a pipeline comprised of one or
more stages, and this pipeline transforms the documents into an aggregated result.

An aggregation operation is similar to a car factory. A car factory has
an assembly line, which contains assembly stations with specialized
tools to do specific jobs, like drills and welders. Raw parts enter the
factory, and then the assembly line transforms and assembles them into a
finished product.

The **aggregation pipeline** is the assembly line, **aggregation
stages** are the assembly stations, and **operator expressions** are the
specialized tools.

Aggregation Versus Find Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use find operations to perform the following actions:

- Select which documents to return
- Select which fields to return
- Sort the results

You can use aggregation operations to perform the following actions:

- Perform find operations
- Rename fields
- Calculate fields
- Summarize data
- Group values

Consider the following :manual:`limitations </core/aggregation-pipeline-limits/>` when 
using aggregation operations:

- Returned documents must not violate the :manual:`BSON document size limit </reference/limits/#mongodb-limit-BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. If required, you can exceed this limit by setting
  the `AllowDiskUse <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.AggregateOptions.AllowDiskUse.html#MongoDB_Driver_AggregateOptions_AllowDiskUse>`__
  property of the ``AggregateOptions`` object that you pass to the ``Aggregate()`` method
  to.

  .. important:: ``$graphLookup`` exception

     The :manual:`$graphLookup </reference/operator/aggregation/graphLookup/>` stage has
     a strict memory limit of 100 megabytes and will ignore the ``AllowDiskUse`` property.

Aggregation Example
-----------------

.. note::
  
  This example uses the ``sample_restaurants.restaurants`` collection
  from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
  free MongoDB Atlas cluster and load the sample datasets, see :ref:`<csharp-quickstart>`.

To perform an aggregation, pass a list of aggregation stages to the
``IMongoCollection<TDocument>.Aggregate()`` method.

The following code example produces a count of the number of bakeries in each borough
of New York. To do so, it uses an aggregation pipeline with the following stages:

- A :manual:`$match </reference/operator/aggregation/match/>` stage to filter for documents whose
  ``cuisine`` field contains the value ``"Bakery"``.

- A :manual:`$group </reference/operator/aggregation/group/>` stage to group the matching
  documents by the ``borough`` field, accumulating a count of documents for each distinct value.

.. io-code-block::

   .. input:: /includes/fundamentals/code-examples/Aggregation.cs
      :language: csharp
      :dedent:
      :start-after: begin-aggregation
      :end-before: end-aggregation
  
   .. output::
      :language: console
      :visible: false

      { "_id" : "Brooklyn", "count" : 173 }
      { "_id" : "Manhattan", "count" : 221 }
      { "_id" : "Bronx", "count" : 71 }
      { "_id" : "Missing", "count" : 2 }
      { "_id" : "Staten Island", "count" : 20 }
      { "_id" : "Queens", "count" : 204 }

Additional Information
----------------------

MongoDB Server Manual
~~~~~~~~~~~~~~~~~~~~~

To view a full list of expression operators, see 
:manual:`Aggregation Operators. </reference/operator/aggregation/>`

To learn about assembling an aggregation pipeline and view examples, see
:manual:`Aggregation Pipeline. </core/aggregation-pipeline/>`

To learn more about creating pipeline stages, see 
:manual:`Aggregation Stages. </reference/operator/aggregation-pipeline/>`

To learn about explaining MongoDB aggregation operations, see
:manual:`Explain Results </reference/explain-results/>` and
:manual:`Query Plans </core/query-plans/>`.

To learn about using LINQ to construct aggregation pipelines, see :ref:`csharp-linq`.

API Documentation
~~~~~~~~~~~~~~~~~

For more information about the aggregation operations discussed in this guide, see the
following API documentation:

- `Aggregate() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.Aggregate.html>`__
- `AggregateOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.AggregateOptions.html>`__
- `$group <{+new-api-root+/MongoDB.Driver/MongoDB.Driver.AggregateFluentBase-1.Group.html}>`__
- `$match <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.AggregateFluentBase-1.Match.html>`__
