.. _csharp-aggregation-group:

=====
Group
=====

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, transform, pipeline

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Group
-----

Use the ``group()`` method to create a :manual:`$group </reference/operator/aggregation/group/>`
pipeline stage to group documents by a specified expression and output a document
for each distinct grouping.

.. tip::

   The driver includes the `Accumulators <{+core-api+}/client/model/Accumulators.html>`__
   class with static factory methods for each of the supported accumulators.

The following example creates a pipeline stage that groups documents by the value
of the ``customerId`` field. Each group accumulates the sum and average
of the values of the ``quantity`` field into the ``totalQuantity`` and
``averageQuantity`` fields.

.. literalinclude:: /includes/aggregation/Builders.cs
   :start-after: // begin group
   :end-before: // end group
   :language: csharp
   :dedent:

Learn more about accumulator operators from the Server manual section
on :manual:`Accumulators </reference/operator/aggregation/#std-label-agg-operators-group-accumulators>`.


$group
~~~~~~

The ``$group`` aggregation stage separates documents into groups according to
the criteria you specify.

Select the :guilabel:`Method Syntax` or :guilabel:`Query Syntax` tab to see how 
to generate an ``$group`` stage using LINQ:

.. tabs::

   .. tab:: Method Syntax
      :tabid: method-syntax

      .. code-block:: csharp
         :emphasize-lines: 2

         var query = queryableCollection
             .GroupBy(r => r.Cuisine)
             .Select(g => new { Cuisine = g.Key, Count = g.Count() });

   .. tab:: Query Syntax
      :tabid: query-syntax

      .. code-block:: csharp
         :emphasize-lines: 2

         var query = from r in queryableCollection
             group r by r.Cuisine into g
             select new {Cuisine = g.Key, Count = g.Count()};

The preceding example groups each document by the value in its ``Cuisine`` field,
then counts how many documents have each ``Cuisine`` value. The result contains 
the following documents:

.. code-block:: json

   // Results Truncated

   { "cuisine" : "Caribbean", "count" : 657 }
   { "cuisine" : "Caf√©/Coffee/Tea", "count" : 1214 }
   { "cuisine" : "Iranian", "count" : 2 }
   { "cuisine" : "Nuts/Confectionary", "count" : 6 }
   { "cuisine" : "Middle Eastern", "count" : 168 }  
   ...

.. note:: Result Order
   
   The preceding queries don't always return results in the same order. Running
   this example may return the results in a different order than shown above.