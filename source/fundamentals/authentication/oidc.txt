.. _csharp-mongodb-oidc:
.. _csharp-authentication-oidc:

MONGODB-OIDC
~~~~~~~~~~~~

.. important::

   The MONGODB-OIDC authentication mechanism requires {+mdb-server+} v7.0 or later running
   on a Linux platform.

The following sections describe how to use the MONGODB-OIDC authentication mechanism to
authenticate from various platforms.

For more information about the MONGODB-OIDC authentication mechanism, see
:manual:`OpenID Connect Authentication </core/security-oidc/>` and
:manual:`MongoDB Server Parameters </reference/parameters/#mongodb-parameter-param.oidcIdentityProviders>`
in the {+mdb-server+} manual.

.. _csharp-mongodb-oidc-azure-imds:

Azure IMDS
++++++++++

If your application runs on an Azure VM, or otherwise uses the
`Azure Instance Metadata Service <https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service>`__
(IMDS), you can authenticate to MongoDB by using the {+driver-short+}'s built-in Azure
support.

You can specify Azure IMDS OIDC authentication on a ``MongoClientSettings`` object either by 
using a ``MongoCredential`` object or as part of the connection string. Select the 
:guilabel:`Connection String` or :guilabel:`MongoCredential` tab to
see the corresponding syntax.

.. tabs::

   .. tab:: Connection String
      :tabid: mongodb-azure-imds-connection-string
    
      The following code example shows how to specify Azure IMDS OIDC authentication. 
      Replace the ``<percent-encoded audience>`` placeholder with the percent-encoded
      value of the ``audience`` parameter configured on your MongoDB deployment. 

      You cannot pass values containing the comma (``,``) character to the ``authMechanismProperties`` 
      option. You must specify values that contain commas in a ``MongoCredential`` object, 
      as demonstrated in the :guilabel:`MongoCredential` tab.
      
      .. code-block:: csharp

         var connectionString = "mongodb://<db_username>@<hostname>[:<port>]/?" +
            "authMechanism=MONGODB-OIDC" +
            "&authMechanismProperties=ENVIRONMENT:azure,TOKEN_RESOURCE:<percent-encoded audience>");
         var mongoClientSettings = MongoClientSettings.FromConnectionString(connectionString);
         var client = new MongoClient(mongoClientSettings);

   .. tab:: MongoCredential
      :tabid: mongodb-azure-mongo-credential

      The following code example shows how to specify Azure IMDS OIDC authentication.
      Replace the ``<db_username>`` placeholder with the client ID or application ID of the
      Azure managed identity or enterprise application. Replace the ``<audience>``
      placeholder with the value of the ``audience`` parameter configured on your MongoDB
      deployment. 

      .. code-block:: csharp

         var mongoClientSettings = MongoClientSettings.FromConnectionString(
            "mongodb+srv://<hostname>[:<port>]");
         mongoClientSettings.Credential = MongoCredential.CreateOidcCredential("azure", "<db_username>")
            .WithMechanismProperty("TOKEN_RESOURCE", "<audience>"); 
         var client = new MongoClient(mongoClientSettings);

.. _csharp-mongodb-oidc-gcp-imds:

GCP IMDS
++++++++

If your application runs on a Google Compute Engine VM, or otherwise uses the
`GCP Instance Metadata Service <https://cloud.google.com/compute/docs/metadata/querying-metadata>`__,
you can authenticate to MongoDB by using the {+driver-short+}'s built-in GCP
support.

You can specify GCP IMDS OIDC authentication on a ``MongoClientSettings`` object either by 
using a ``MongoCredential`` object or as part of the connection string. Select the 
:guilabel:`Connection String` or :guilabel:`MongoCredential` tab to
see the corresponding syntax.

.. tabs::

   .. tab:: Connection String
      :tabid: mongodb-gcp-imds-connection-string
    
      The following code example shows how to specify GCP IMDS OIDC authentication as
      part of the authentication string. 
      Replace the ``<audience>`` placeholder with the
      value of the ``audience`` parameter configured on your MongoDB deployment.

      You cannot pass values containing the comma (``,``) character to the ``authMechanismProperties`` 
      option. You must specify values that contain commas in a ``MongoCredential`` object, 
      as demonstrated in the :guilabel:`MongoCredential` tab.
      
      .. code-block:: csharp

         var connectionString = "mongodb://<hostname>[:<port>]/?" +
            "authMechanism=MONGODB-OIDC" +
            "&authMechanismProperties=ENVIRONMENT:gcp,TOKEN_RESOURCE:<audience>");
         var mongoClientSettings = MongoClientSettings.FromConnectionString(connectionString);
         var client = new MongoClient(mongoClientSettings);

   .. tab:: MongoCredential
      :tabid: mongodb-gcp-mongo-credential

      The following code example shows how to specify GCP IMDS OIDC authentication by using
      a ``MongoCredential`` object.
      Replace the ``<audience>``
      placeholder with the value of the ``audience`` parameter configured on your MongoDB
      deployment. 

      .. code-block:: csharp

         var mongoClientSettings = MongoClientSettings.FromConnectionString(
            "mongodb+srv://<hostname>[:<port>]");
         mongoClientSettings.Credential = MongoCredential.CreateOidcCredential("gcp")
            .WithMechanismProperty("TOKEN_RESOURCE", "<audience>"); 
         var client = new MongoClient(mongoClientSettings);

Custom Callback
+++++++++++++++

The {+driver-short+} doesn't offer built-in support for all platforms, including
Azure Functions and Azure Kubernetes Service (AKS). Instead, you
must define a custom callback to use OIDC to authenticate from these platforms.

First, define a class that implements the ``IOidcCallback`` interface. This interface
contains two methods:

- ``GetOidcAccessToken()``: This method accepts the parameters to the callback method
  and returns the callback response. 
- ``GetOidcAccessTokenAsync()``: This method is an asynchronous version of the previous
  method. 

The following code is an example implementation of the ``IOidcCallback`` interface.
In this example, the methods retrieve an OIDC token from a file named ``"access-token.dat"``
in the local file system.

.. code-block:: csharp

   public class MyCallback : IOidcCallback
   {
       public OidcAccessToken GetOidcAccessToken(
           OidcCallbackParameters parameters,
           CancellationToken cancellationToken)
       {
           var accessToken = File.ReadAllText("access-token.dat");
           return new(accessToken, expiresIn: null);
       }

       public async Task<OidcAccessToken> GetOidcAccessTokenAsync(
           OidcCallbackParameters parameters,
           CancellationToken cancellationToken)
       {
           var accessToken = await File.ReadAllTextAsync(
               "access-token.dat",
               cancellationToken)
               .ConfigureAwait(false);
           return new(accessToken, expiresIn: null);
       }
   }

After you define a class that contains your custom callback methods, call the
``MongoCredential.CreateOidcCredential()`` method and pass in a new instance of your
class. Store the result of this method call in the ``Credential`` property of your
``MongoClientSettings`` object, as shown in the following code example:

.. code-block:: csharp

   var mongoClientSettings = MongoClientSettings.FromConnectionString("mongodb://<hostname>[:port]");
   mongoClientSettings.Credential = MongoCredential.CreateOidcCredential(new MyCallback());
   var client = new MongoClient(mongoClientSettings);
