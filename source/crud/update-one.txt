.. _csharp-update-one:

==========
Update One
==========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: synchronous, asynchronous

.. toctree::
   :caption: Update Documents

   Fields </crud/update-one/fields>
   Arrays </crud/update-one/arrays>

.. include:: /includes/page-templates/update/update.rst

   .. replacement:: sync-method

      ``UpdateOne()``
   
   .. replacement:: async-method

      ``UpdateOneAsync()``
   
   .. replacement:: document-or-documents

      document
   
   .. replacement:: fields-link

      :ref:`csharp-update-one-fields`

   .. replacement:: arrays-link

      :ref:`csharp-update-one-arrays`
   
   .. replacement:: single-or-multiple

      a single document

   .. replacement:: usage-examples-links

      - `UpdateOne() <{+example+}/update-one/UpdateOne.cs>`__
      - `UpdateOneAsync() <{+example+}/update-one/UpdateOneAsync.cs>`__

   .. replacement:: sync-api-link

      `UpdateOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOne.html>`__

   .. replacement:: async-api-link

      `UpdateOneAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOneAsync.html>`__

   .. replacement:: instruqt-lab-component

   .. replacement:: instruqt-lab-instructions
   
   .. replacement:: combine-code-example-tabs

      .. tabs::

         .. tab:: Synchronous
            :tabid: sync

            .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
               :language: csharp
               :copyable: true
               :dedent:
               :start-after: // start-combine-sync
               :end-before: // end-combine-sync

         .. tab:: Asynchronous
            :tabid: async

            .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
               :language: csharp
               :copyable: true
               :dedent:
               :start-after: // start-combine-async
               :end-before: // end-combine-async

   .. replacement:: pipeline-code-example-tabs

      .. tabs::
      
         .. tab:: Synchronous
            :tabid: sync

            .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
               :language: csharp
               :copyable: true
               :dedent:
               :start-after: // start-pipeline-sync
               :end-before: // end-pipeline-sync

         .. tab:: Asynchronous
            :tabid: async

            .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
               :language: csharp
               :copyable: true
               :dedent:
               :start-after: // start-pipeline-async
               :end-before: // end-pipeline-async

.. TODO: integrate into existing page

Sample Class
------------

The code examples in this guide demonstrate how you can use builders to
create types to interact with documents in the sample collection ``plants.flowers``.
Documents in this collection are modeled by the following ``Flower`` class:

.. literalinclude:: /includes/fundamentals/code-examples/builders.cs
   :language: csharp
   :dedent:
   :start-after: start-model
   :end-before: end-model

Each builder class takes a generic type parameter
``TDocument`` which represents the type of document that you are working
with. In this guide, the ``Flower`` class is the document type used in
each builder class example.

Define an Update
----------------

The ``UpdateDefinitionBuilder`` class provides a type-safe interface for
building up an update specification. Suppose you want to create an
update specification with the following criteria:

- Create the new field ``SunRequirement``
- Multiply the ``Price`` field value by 0.9

Use builders to create the update specification with the typed variant:

.. code-block:: csharp
   :copyable: true

   var builder = Builders<Flower>.Update;
   var update = builder.Set(f => f.SunRequirement, "Full sun").Mul(f => f.Price, 0.9);

Alternatively, you can use string-based field names to define the update:
   
.. code-block:: csharp
   :copyable: true

   var builder = Builders<Flower>.Update;
   var update = builder.Set("SunRequirement", "Full sun").Mul("Price", 0.9);

- `UpdateDefinitionBuilder <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateDefinitionBuilder-1.html>`__