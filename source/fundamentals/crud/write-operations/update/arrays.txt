.. _csharp-update-arrays:

=============
Update Arrays
=============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: synchronous, asynchronous

Overview
--------

On this page, you can learn how to use the {+driver-long+} to update array
fields in MongoDB documents. This page describes how to create ``UpdateDefinition<TDocument>``
objects that specify the update operations you want to perform on array fields.
You can pass these objects to the update methods described on *this page.*

The {+driver-short+} supports the array update operators and modifiers described in the
:manual:`{+mdb-server+} manual </reference/operator/update/#array>`.
To specify an update operation, call the corresponding method from the ``Builders.Update``
property. The following sections describe these methods in more detail.

.. note:: Method Overloads

   Many of the methods on this page have multiple overloads. The examples
   in this guide show only one overload for each method.  For
   more information about the available overloads, see the
   :manual:`{+new-api-root+} API documentation </api-reference>`.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection
from the ``sample_restaurants`` database. The documents in this
collection use the following ``Restaurant``, ``Address``, and ``GradeEntry`` 
classes as models:

.. literalinclude:: /includes/code-examples/Restaurant.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/Address.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/GradeEntry.cs
   :language: csharp
   :copyable:
   :dedent:

.. include:: /includes/convention-pack-note.rst

This collection is from the :atlas:`sample datasets </sample-data>` provided
by Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster
and load this sample data.

Add One Value
-------------

To add one value to the end of an array, call the ``Builders.Update.Push()`` method.
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add a value to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``value``
     - The value to add to the end of the array field. 

       **Data Type:** ``TItem`` 

The following code example pushes a new ``GradeEntry`` object into the ``Grades``
array in the matching document. Select the :guilabel:`Synchronous` or
:guilabel:`Asynchronous` tab to see the corresponding code.

.. tabs::

   .. tab:: Synchronous
      :tabid: update-one-array-sync

      .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
         :language: csharp
         :copyable: true
         :dedent:
         :start-after: // start-update-one-array
         :end-before: // end-update-one-array

   .. tab:: Asynchronous
      :tabid: update-one-array-async

      .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
         :language: csharp
         :copyable: true
         :dedent:
         :start-after: // start-update-one-array-async
         :end-before: // end-update-one-array-async

To add one value to the end of an array, *but only if it doesn't already exist in the array*,
call the ``Builders.Update.AddToSet()`` method.
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``value``
     - The value to add to the end of the array field.

       **Data Type:** ``TItem`` 

The following code example pushes a new ``GradeEntry`` object into the ``Grades``
array in the matching document. Select the :guilabel:`Synchronous` or
:guilabel:`Asynchronous` tab to see the corresponding code.

.. tip:: Specify a Position
  
   To add a value at a specific position in an array, call the ``PushEach()`` method.

Add Multiple Values
-------------------

To add multiple values to an array, call the ``Builders.Update.PushEach()`` method.
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``values``
     - The values to add to the array field.

       **Data Type:** ``IEnumerable<TItem>``

   * - ``slice``
     - The number of elements to keep in the array. If the value is negative, the
        method keeps the specified number of elements from the end of the array.

       **Data Type:** ``int?``

   * - ``position``
     - The position in the array at which to add the values.

       **Data Type:** ``int?``

   * - ``sort``
     - The values to add to the array field.

      **Data Type:** `SortDefinition<TItem> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.SortDefinition-1.html>`__

To add multiple values to an array only if they aren't there, call the
``Builders.Update.AddToSetEach()`` method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``values``
     - The values to add to the array field.

       **Data Type:** ``IEnumerable<TItem>``

Remove Values
-------------

To remove the first value from an array, call the ``Builders.Update.PopFirst()`` method.
This method accepts the following parameter:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to remove the first value from.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

To remove the last value from an array, call the ``Builders.Update.PopLast()`` method:
This method accepts the following parameter:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to remove the last value from.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

To remove all instances of a specific value from an array, call the ``Builders.Update.Pull()`` method:
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``value``
     - The value to remove from the array field.

       **Data Type:** ``IEnumerable<TItem>``

To remove all instances of more than one specific value from an array, call the ``Builders.Update.PullAll()`` method:
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``values``
     - The values to remove from the array field.

       **Data Type:** ``IEnumerable<TItem>``

To remove all values that match a specific condition from an array, call the ``Builders.Update.PullFilter()`` method:
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``filter``
     - A query filter that specifies the condition for values to remove.

       **Data Type:** `FilterDefinition<TItem> <{+new-api-root+>/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

Update Matching Elements
------------------------

To query and update specific elements in an array field, use
the :manual:`positional operator </reference/operator/update/positional/#mongodb-update-up.->` (``$``)
when you specify the field to update.
Combined with the ``Builders.Update.Set()`` method, you can use this operator to query
and update specific elements in an array field.

To update the first array element that matches your query filter, use the
positional ``$`` operator. The array value must appear be part of the query filter.

The following code example queries the ``restaurants`` collection for a document
that contains a grade of 2. It then updates that grade to 22 in the matching documents.
Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code.

To update all array elements in the matching documents, use the all positional operator
(``$[]``).

The following code example queries the ``restaurants`` collection for a document
where the ``name`` is ``"Downtown Deli"``. It then updates all that grade to 22 in the matching documents.
Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code.

To update all array elements that match your query filter, use the all positional operator
(``$[]``). The array value must appear be part of the query filter.

The following code example queries the ``restaurants`` collection for a document
that contains a grade of 2. It then updates that grade to 22 in the matching documents.


Updating Documents with LINQ3
-----------------------------

LINQ syntax contains a positional operator (``$``) that you can use to update elements in an array field.
Previous versions of the {+driver-short+} supported both the LINQ2 and LINQ3 providers.
In LINQ2, you could use ``-1`` to indicate use of the positional operator.

For example, the ``Restaurant`` class contains an array field named ``Grades`` that
contains multiple ``GradeEntry`` elements. The following code sample uses LINQ2 to update the
``Grade`` field of the first element in the ``Grades`` array:

.. code-block:: csharp
   :linenos:

   var anArrayId = ObjectId.GenerateNewId();
   var another = new Restaurant
   {
       Id = ObjectId.GenerateNewId(),
       AnArrayMember = new List<AnArrayClass>
       {
           new AnArrayClass { Id = anArrayId, Deleted = false }
       }
   };

   await collection.UpdateOneAsync(
      r => r.Id == "targetId" && r.AnArrayMember.Any(l => l.Id == anArrayId),
      Builders<Restaurant>.Update.Set(l => l.AnArrayMember.ElementAt(-1).Deleted, true));

.. code-block:: csharp
   :linenos:

   var anArrayId = ObjectId.GenerateNewId();
   var another = new Restaurant
   {
       Id = ObjectId.GenerateNewId(),
       AnArrayMember = new List<AnArrayClass>
       {
           new AnArrayClass { Id = anArrayId, Deleted = false }
       }
   };

   await collection.UpdateOneAsync(
      r => r.Id == "targetId" && r.AnArrayMember.Any(l => l.Id == anArrayId),
      Builders<Restaurant>.Update.Set(l => l.AnArrayMember.ElementAt(-1).Deleted, true));

This no longer works in LINQ3. Instead, you must use the following syntax:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Elements to Match
   * - LINQ Syntax
     - {+driver-short+} Syntax

   * - First matching element
   * - ``array.$``
     - | Specifies the positional operator in LINQ3. 
         See :manual:`the MongoDB server manual</reference/operator/update/positional>`
         for more information.
   
   * - All elements
   * - ``array.$[]``
     - | Specifies the positional operator in LINQ3. 
         See :manual:`the MongoDB server manual</reference/operator/update/positional>`
         for more information.
   
   * - All matching elements
   * - ``array.$[<identifier>]``
     - | Specifies the positional operator in LINQ3. 
         See :manual:`the MongoDB server manual</reference/operator/update/positional>`
         for more information.