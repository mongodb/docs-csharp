.. _csharp-update-fields:

=============
Update Fields
=============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: synchronous, asynchronous

Overview
--------

.. note:: Updating Arrays

   This page discusses how to update document fields that contain single values.
   To learn how to update array values in MongoDB documents, see
   :ref:`<csharp-update-arrays>`.

In this guide, you can learn how to use the {+driver-long+} to update the
values of fields in MongoDB documents.

The {+driver-short+} provides the following methods to update fields:

- ``UpdateOne()`` or ``UpdateOneAsync()``
- ``UpdateMany()`` or ``UpdateManyAsync()``

.. tip:: Interactive Lab
   
   This page includes a short interactive lab that demonstrates how to
   modify data by using the ``UpdateManyAsync()`` method. You can complete this
   lab directly in your browser window without installing MongoDB or a code editor.

   To start the lab, click the :guilabel:`Open Interactive Tutorial` button at the
   top of the page. To expand the lab to a full-screen format, click the
   full-screen button (:guilabel:`â›¶`) in the top-right corner of the lab pane.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection
from the ``sample_restaurants`` database. The documents in this
collection use the following ``Restaurant``, ``Address``, and ``GradeEntry`` 
classes as models:

.. literalinclude:: /includes/code-examples/Restaurant.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/Address.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/GradeEntry.cs
   :language: csharp
   :copyable:
   :dedent:

.. include:: /includes/convention-pack-note.rst

This collection is from the :atlas:`sample datasets </sample-data>` provided
by Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster
and load this sample data.

.. _csharp-update-operation:

Update One Document
-------------------

To update one or more fields in a MongoDB document, call the ``UpdateOne()`` or
``UpdateOneAsync()`` method. These methods accept the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``filter``
     - A *query filter* that specifies the document to update. You can use the
       ``Builders`` class to create a query filter. For more information about
       query filters, see the
       :manual:`{+mdb-server+} manual </core/document/#query-filter-documents>`.

       **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+>/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

   * - ``update``
     - An instance of the ``UpdateDefinition`` class. This object specifies the kind of update
       operation, the fields to update, and the new value for each field. For a complete
       list of update operations, see
       :manual:`Field Update Operators </reference/operator/update-field/>` in the
       {+mdb-server+} manual. 

       **Data Type:** `UpdateDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateDefinition-1.html>`__

   * - ``options``
     - *Optional.* An instance of the ``UpdateOptions`` class that specifies the
       configuration for the update operation. The default value is ``null``.

       **Data Type:** `UpdateOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateOptions.html>`__

   * - ``cancellationToken``
     - *Optional.* A token that you can use to cancel the operation.

       **Data type**: `CancellationToken <https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken>`__

The following code example demonstrates how to perform an update operation. The
code performs the following steps:

.. tip:: Aggregation Pipelines in Update Operations

   If you are using MongoDB Version 4.2 or later, you can use aggregation
   pipelines made up of a subset of aggregation stages in update operations. For
   more information on the aggregation stages MongoDB supports in
   aggregation pipelines used in update operations, see the tutorial about building
   :manual:`updates with aggregation pipelines </tutorial/update-documents-with-aggregation-pipeline/>`.

Update One Document
~~~~~~~~~~~~~~~~~~~

The following code shows how to use the asynchronous ``UpdateOneAsync()`` method 
or the synchronous ``UpdateOne()`` method to update one document.

.. tabs::

   .. tab:: Asynchronous
      :tabid: update-one-async

      .. code-block:: csharp
         :copyable: true

         var result = await _restaurantsCollection.UpdateOneAsync(filter, update);

   .. tab:: Synchronous
      :tabid: update-one-sync

      .. code-block:: csharp
         :copyable: true

         var result = _restaurantsCollection.UpdateOne(filter, update);

Update Many Documents
~~~~~~~~~~~~~~~~~~~~~

The following code shows how to use the asynchronous
``UpdateManyAsync()`` method or the synchronous ``UpdateMany()`` method to
update all matched documents.

.. tabs::

   .. tab:: Asynchronous
      :tabid: update-many-async

      .. code-block:: csharp
         :copyable: true

         var result = await _restaurantsCollection.UpdateManyAsync(filter, update);

   .. tab:: Synchronous
      :tabid: update-many-sync

      .. code-block:: csharp
         :copyable: true

         var result = _restaurantsCollection.UpdateMany(filter, update);

.. tip::

   Find runnable examples that use these methods under :ref:`Additional
   Information <csharp-change-info>`.

Customize the Update Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Both methods optionally accept an ``UpdateOptions`` object as an additional parameter,
which represents options you can use to configure the update operation.
If you don't specify any ``UpdateOptions`` properties, the driver does
not customize the update operation.

The ``UpdateOptions`` type allows you to configure options with the
following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``ArrayFilters``
     - | Specifies which array elements to modify for an update operation on an array field.
         See :manual:`the MongoDB server manual</reference/command/update/#update-elements-match-arrayfilters-criteria>`
         for more information.

   * - ``BypassDocumentValidation``
     - | Specifies whether the update operation bypasses document validation. This lets you 
         update documents that don't meet the schema validation requirements, if any 
         exist. See :manual:`the MongoDB server manual</core/schema-validation/#schema-validation>`
         for more information on schema validation.

   * - ``Collation``
     - | Specifies the kind of language collation to use when sorting
         results. See :manual:`the MongoDB server manual</reference/collation/#std-label-collation>`
         for more information on collation.

   * - ``Comment``
     - | Gets or sets the user-provided comment for the operation. 
         See :manual:`the MongoDB server manual</reference/command/update/#command-fields>`
         for more information.

   * - ``Hint``
     - | Gets or sets the index to use to scan for documents. 
         See :manual:`the MongoDB server manual</reference/command/update/#std-label-update-command-hint>`
         for more information.

   * - ``IsUpsert``
     - | Specifies whether the update operation performs an upsert operation if no 
         documents match the query filter. 
         See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-command-upsert>`
         for more information.

   * - ``Let``
     - | Gets or sets the let document. 
         See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-let-syntax>`
         for more information.

Return Value
~~~~~~~~~~~~

The ``UpdateOne()`` and ``UpdateMany()`` methods each return an ``UpdateResult`` 
object. The ``UpdateResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``IsAcknowledged``
     - | Indicates whether the update operation was acknowledged by MongoDB.

   * - ``IsModifiedCountAvailable``
     - | Indicates whether you can read the count of updated records on the
         ``UpdateResult``.

   * - ``MatchedCount``
     - | The number of documents that matched the query filter, regardless of
         how many were updated.

   * - ``ModifiedCount``
     - | The number of documents updated by the update operation. If an updated
         document is identical to the original, it won't be included in this count.

   * - ``UpsertedId``
     - | The ID of the document that was upserted in the database, if the driver
         performed an upsert.

Example
~~~~~~~

The following code uses the ``UpdateMany()`` method to find all documents where the 
``borough`` field has the value "Manhattan", then updates the ``borough``
value in these documents to "Manhattan (north)". Because the ``IsUpsert`` option is 
set to ``true``, the driver inserts a new document if the query filter doesn't 
match any existing documents.

.. io-code-block::
   :copyable: true

   .. input::
      :language: csharp

        var filter = Builders<Restaurant>.Filter
            .Eq(restaurant => restaurant.Borough, "Manhattan");
            
        var update = Builders<Restaurant>.Update
            .Set(restaurant => restaurant.Borough, "Manhattan (north)");

        UpdateOptions opts = new UpdateOptions()
        {
            Comment = new BsonString("Borough updated for C# Driver Fundamentals"),
            IsUpsert = true
        };

        Console.WriteLine("Updating documents...");
        var result = _restaurantsCollection.UpdateMany(filter, update, opts);
      
        Console.WriteLine($"Updated documents: {result.ModifiedCount}");
        Console.WriteLine($"Result acknowledged? {result.IsAcknowledged}");

   .. output::
      :language: none
      :visible: false
      
      Updating documents...
      Updated documents: 10259
      Result acknowledged? True

.. note::

   If the preceding example used the ``UpdateOne()`` method instead of
   ``UpdateMany()``, the driver would update only the first of the
   matched documents.

.. _csharp-change-info:

Additional Information
----------------------

For runnable examples of the update operations, see the following usage
examples:

- :ref:`csharp-update-one`
- :ref:`csharp-update-many`

To learn more about creating query filters, see the :ref:`csharp-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

* `UpdateOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOne.html>`__
* `UpdateOneAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOneAsync.html>`__
* `UpdateMany() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateMany.html>`__
* `UpdateManyAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateManyAsync.html>`__
* `UpdateOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateOptions.html>`__
* `UpdateResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateResult.html>`__

.. _csharp-update-instruqt-lab:

.. instruqt:: /mongodb-docs/tracks/update-a-document---c-net-driver?token=em_69t_l-j0BC_en7Uy
   :title: UpdateManyAsync() Lesson
   :drawer: