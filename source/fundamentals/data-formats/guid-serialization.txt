.. _csharp-bson:

==================
GUID Serialization
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to serialize **globally unique identifiers** (GUIDs),
also known as **universally unique identifiers** (UUIDs).

A GUID is a unique ID you can assign to a document. In MongoDB,
GUIDs were originally represented as ``BsonBinaryData`` values of subtype 3. 
Because different drivers used different byte orders when representing GUIDs, we created
subtype 4 to standardize byte orders across drivers. 

GuidRepresentationMode
----------------------

In the {+driver-short+}, serializers have a property called ``GuidRepresentationMode``.
This property controls the way that the {+driver-short+} handles GUIDs in a collection.

The ``GuidRepresentationMode`` property has two possible values: ``V2`` and ``V3``. 

V2
~~

``GuidRepresentationMode.V2`` assumes that all GUIDs in a collection use the same 
``BsonBinaryData`` sub type and byte order. In this mode, GUID representation is 
controlled by the reader or writer, not the serializer.

``V2`` is the default ``GuidRepresentationMode``.

V3
~~

``GuidRepresentationMode.V3`` allows documents in the same collection to use different 
GUID formats. This may happen, for example, when working with historical data that uses 
an older format.  
In this mode, GUID representation is controlled at the property level by configuring the 
serializer for each property.

To use ``GuidRepresentationMode.V3``, run the following line of code as early in your 
application as possible:

.. code-block:: csharp

   BsonDefaults.GuidRepresentationMode = GuidRepresentationMode.V3;

Running in ``V3`` mode changes the behavior of the driver in the following ways:

- The ``BsonBinaryReader.ReadBinaryData()`` method ignores ``readerSettings.GuidRepresentation``
- The ``BsonBinaryWriter.WriteBinaryData()`` method ignores ``writerSettings.GuidRepresentation``
- The ``JsonReader.ReadBinaryData()`` method ignores ``readerSettings.GuidRepresentation``
- ``JsonWriter`` ignores ``writerSettings.GuidRepresentation``
- If you call the ``BsonBinaryData.ToGuid()`` method without the ``GuidRepresentation``
  parameter, it's valid only for subtype 4.

When version 3 of the {+driver-short+} is released, support for ``GuidRepresentation.V2``
will be removed from the driver and ``V3`` will become the default. 

.. note::

   You can't use both ``V2`` and ``V3`` in a single application.

.. tip::
   
   Although ``GuideRepresentationMode.V3`` allows for multiple GUID formats,
   we recommend representing GUIDs uniformly using the 
   standard ``BsonBinaryData`` subtype 4.

Guid Serializer
---------------

To allow multiple GUID representations to be used, the ``GuidSerializer`` class contains
a constructor that allows you to select the GUID representation. The following code sample
creates a ``GuidSerializer`` for a GUID representation of subtype 4:

.. code-block::

   var guidSerializer = new GuidSerializer(GuidRepresentation.Standard);

To use the ``Standard`` GUID representation globally, run the following code early in 
your application to register a ``GuidSerializer``:

.. code-block:: csharp

   BsonSerializer.RegisterSerializer(new GuidSerializer(GuidRepresentation.Standard));

Because ``V3`` handles serialization at level of individual properties, when using it,
you must specify the ``GuidRepresentation`` you want to use for every GUID property. 
If you're using the driver to auto-map your {+language+} classes to document schemas,
you can use the ``BsonGuidRepresentation`` attribute to specify the representation.

.. code-block:: csharp

   public class C
   {
       public int Id { get; set; }

      [BsonGuidRepresentation(GuidRepresentation.Standard)]
      public Guid G { get; set; }
}

.. tip::

   If most of your GUIDs use the same representation, you can register a global 
   ``GuidSerializer`` for this representation, then use the ``BsonGuidRepresentation`` 
   for the rest.

Object Serializer
-----------------

To allow multiple GUID representations to be used, the ``ObjectSerializer`` class contains
a constructor that allows you to select the GUID representation. The following code sample
creates an ``ObjectSerializer`` for a GUID representation of subtype 4:

.. code-block::

   var guidSerializer = new GuidSerializer(GuidRepresentation.Standard);

To use the ``Standard`` GUID representation globally, run the following code early in 
your application to register a ``GuidSerializer``:

.. code-block:: csharp

   var objectDiscriminatorConvention = BsonSerializer.LookupDiscriminatorConvention(typeof(object));
   var objectSerializer = new ObjectSerializer(objectDiscriminatorConvention, GuidRepresentation.Standard);

If your application relies on an ``ObjectSerializer`` to serialize any GUIDs, you 
must also register the serializer early in your application. The serializer that you 
register will be used globally whenever an object serializer is needed and has not 
been otherwise specified.

.. code-block:: csharp
   :emphasize-lines: 3

   var objectDiscriminatorConvention = BsonSerializer.LookupDiscriminatorConvention(typeof(object));
   var objectSerializer = new ObjectSerializer(objectDiscriminatorConvention, GuidRepresentation.Standard);
   BsonSerializer.RegisterSerializer(objectSerializer);


