.. _csharp-update-fields:

=============
Update Fields
=============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: synchronous, asynchronous

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to update the
values of fields in MongoDB documents.

The {+driver-short+} provides the following methods to update fields:

- ``UpdateOne()`` or ``UpdateOneAsync()``

.. tip:: Interactive Lab
   
   This page includes a short interactive lab that demonstrates how to
   modify data by using the ``UpdateManyAsync()`` method. You can complete this
   lab directly in your browser window without installing MongoDB or a code editor.

   To start the lab, click the :guilabel:`Open Interactive Tutorial` button at the
   top of the page. To expand the lab to a full-screen format, click the
   full-screen button (:guilabel:`â›¶`) in the top-right corner of the lab pane.

.. note:: Method Overloads

   Many of the methods in this guide have multiple overloads. The examples
   in this guide use the simplest overload for demonstration purposes. For
   more information about the available overloads, see the
   :manual:`{+new-api-root+} API documentation </api-reference>`.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection
from the ``sample_restaurants`` database. The documents in this
collection use the following ``Restaurant``, ``Address``, and ``GradeEntry`` 
classes as models:

.. literalinclude:: /includes/code-examples/Restaurant.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/Address.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/GradeEntry.cs
   :language: csharp
   :copyable:
   :dedent:

.. include:: /includes/convention-pack-note.rst

This collection is from the :atlas:`sample datasets </sample-data>` provided
by Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster
and load this sample data.

.. _csharp-update-operation:

Single Values
-------------

The {+driver-short+} supports the field update operators described in the
:manual:`{+mdb-server+} manual </reference/operator/update/#fields>`. To specify an
update operation, call the corresponding method from the ``Builders.Update`` property. 
The following sections describe these methods in more detail.

Increment a Value
~~~~~~~~~~~~~~~~~

To increment the value of a field by a specific amount, call the ``Builders.Update.Inc()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to increment.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The amount to increment the field by.

       **Data Type:** ``TField``

Set If Lower or Greater
~~~~~~~~~~~~~~~~~~~~~~~

To update the value of the field to a specified value, *but only if the specified value
is greater than the current value of the field,* call the ``Builders.Update.Max()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The value to set the field to.

       **Data Type:** ``TField``

To update the value of the field to a specified value, *but only if the specified value
is lesser than the current value of the field,* call the ``Builders.Update.Min()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The value to set the field to.

       **Data Type:** ``TField``

Multiply a Value
~~~~~~~~~~~~~~~~

To multiply the value of a field by a specific amount, call the ``Builders.Update.Mul()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The amount to multiply the field by.

       **Data Type:** ``TField``

Rename a Field
~~~~~~~~~~~~~~

To rename a field, call the ``Builders.Update.Rename()`` method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to rename.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``newName``
     - The new name for the field.

       **Data Type:** ``string``

Set a Value
~~~~~~~~~~~

To set the value of a field to a specific value, call the ``Builders.Update.Set()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The value to set the field to.

       **Data Type:** ``TField``

Unset a Field
~~~~~~~~~~~~~

To remove a field from a document, call the ``Builders.Update.Unset()`` method. This method accepts the following parameter:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to remove.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

Set on Insert
~~~~~~~~~~~~~

To set the value of a field only if the document is an upsert, call the ``Builders.Update.SetOnInsert()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The value to set the field to.

       **Data Type:** ``TField``

Set the Current Date
~~~~~~~~~~~~~~~~~~~~

To set the value of a field to the current date and time, call the ``Builders.Update.CurrentDate()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``type``
     - The format of the date and time, defined in the ``UpdateDefinitionCurrentDateType``
       enum. The default value is ``null``.

       **Data Type:** `UpdateDefinitionCurrentDateType? <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateDefinitionCurrentDateType.html>`__

The following code example performs these steps:

1. Creates a query filter that matches documents where the value of the ``name`` field
   is "Bagels N Buns".
#. Creates an update definition that sets the value of the ``name`` field to "2 Bagels 2 Buns".
#. Calls the ``UpdateOne()`` method to update the document.

Select  the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding
code.

.. tabs::

   .. tab:: Synchronous
      :tabid: update-one-sync

      .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
         :language: csharp
         :copyable: true
         :dedent:
         :start-after: // start-update-one
         :end-before: // end-update-one

   .. tab:: Asynchronous
      :tabid: update-one-async

      .. literalinclude:: /includes/code-examples/update-one/UpdateOneAsync.cs
         :language: csharp
         :copyable: true
         :dedent:
         :start-after: // start-update-one-async
         :end-before: // end-update-one-async

