.. _csharp-kerberos:
.. _csharp-authentication-kerberos:

Authenticate with GSSAPI/Kerberos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Generic Security Services API (GSSAPI) authentication mechanism allows the 
user to authenticate to a Kerberos service using the user's principal name.

The following examples specify the authentication mechanism using the following
placeholders:

- ``<username>``: Your :wikipedia:`URL-encoded <Percent-encoding>` principal name; for example "username%40REALM.ME"
- ``<password>``: Your Kerberos user's password
- ``<hostname>``: The network address of your MongoDB server, accessible by your client

Select the :guilabel:`Connection String` or :guilabel:`MongoCredential` tab to
see the corresponding syntax for specifying the GSSAPI/Kerberos authentication
mechanism:

.. tabs::

   .. tab:: Connection String
      :tabid: connection-string

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://<username>:<password>@<hostname>/?authMechanism=GSSAPI");

   .. tab:: MongoCredential
      :tabid: mongo-credential

      .. code-block:: csharp
         :emphasize-lines: 1

         var credential = MongoCredential.CreateGssapiCredential("<username>", "<password>");
         var settings = MongoClientSettings.FromConnectionString("<connection string>");
         settings.Credential = credential;
         var mongoClient = new MongoClient(settings);

.. tip:: Omitting the Password

   You can omit the password if one of the following are true:

   - On Windows, the process owner running the application is the same as the
     user needing authentication.

   - On Linux, the user has initialized their keytab via ``kinit username@REALM.COM``.
  
Additional Properties
+++++++++++++++++++++

You can specify additional properties with your authentication
mechanism using the connection string or a factory method in the ``MongoCredential``
class.

Fully Qualified Domain Name
```````````````````````````

The following example shows how to use the DNS server to retrieve the fully
qualified domain name of the host:
  
.. tabs::

   .. tab:: Connection String
      :tabid: connection-string

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://<db_username>:<db_password>@<hostname>/?authMechanism=GSSAPI&authMechanismProperties=CANONICALIZE_HOSTNAME:true");

   .. tab:: MongoCredential
      :tabid: mongo-credential

      .. code-block:: csharp
         :emphasize-lines: 1, 2

         var credential = MongoCredential.CreateGssapiCredential("<db_username>", "<db_passwordpassword>");
         credential = credential.WithMechanismProperty("CANONICALIZE_HOST_NAME", "true");
         
         var settings = MongoClientSettings.FromConnectionString("<connection string>");
         settings.Credential = credential;
         var mongoClient = new MongoClient(settings);

Realm
`````

The following example shows how to specify the user's realm when it is different
from the service's realm:
  
.. tabs::

   .. tab:: Connection String
      :tabid: connection-string

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://<db_username>:<db_password>@<hostname>/?authMechanism=GSSAPI&authMechanismProperties=SERVICE_REALM:<user's realm>");

   .. tab:: MongoCredential
      :tabid: mongo-credential

      .. code-block:: csharp
         :emphasize-lines: 1, 2

         var credential = MongoCredential.CreateGssapiCredential("<db_username>", "<db_password>");
         credential = credential.WithMechanismProperty("SERVICE_REALM", "<user's realm>");
         
         var settings = MongoClientSettings.FromConnectionString("<connection string>");
         settings.Credential = credential;
         var mongoClient = new MongoClient(settings);

Service name
````````````

The following example shows how to specify the service name when it is not the
default ``mongodb``:

.. tabs::

   .. tab:: Connection String
      :tabid: connection-string

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://<db_username>:<db_password>@<hostname>/?authMechanism=GSSAPI&authMechanismProperties=SERVICE_NAME:<service name>");

   .. tab:: MongoCredential
      :tabid: mongo-credential

      .. code-block:: csharp
         :emphasize-lines: 1, 2

         var credential = MongoCredential.CreateGssapiCredential("<db_username>", "<db_password>");
         credential = credential.WithMechanismProperty("SERVICE_NAME", "<service name>");
         
         var settings = MongoClientSettings.FromConnectionString("<connection string>");
         settings.Credential = credential;
         var mongoClient = new MongoClient(settings);

Multiple properties
```````````````````
  
The following example shows how to specify multiple authentication mechanism
properties:

.. tabs::

   .. tab:: Connection String
      :tabid: connection-string

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://<db_username>:<db_password>@<hostname>/?authMechanism=GSSAPI&authMechanismProperties=SERVICE_NAME:<service name>,SERVICE_REALM:<user's realm>");

   .. tab:: MongoCredential
      :tabid: mongo-credential

      .. code-block:: csharp
         :emphasize-lines: 2, 3

         var credential = MongoCredential.CreateGssapiCredential("<db_username>", "<db_password>");
         credential = credential.WithMechanismProperty("SERVICE_REALM", "<user's realm>")
             .WithMechanismProperty("SERVICE_NAME", "<service name>");
         
         var settings = MongoClientSettings.FromConnectionString("<connection string>");
         settings.Credential = credential;
         var mongoClient = new MongoClient(settings);