

Aggregation Stage Methods
-------------------------

The following table lists the builders methods in the {+driver-short+} that correspond
to stages in the aggregation pipeline. Because each of these methods returns a
``PipelineDefinition`` object, you can chain method calls together.
For more information about a method, click the
method name.

.. list-table::
   :header-rows: 1
   :widths: 20 80

  * - Stage
    - Description

  * - :ref:`Bucket() <csharp-aggregation-bucket>`

    - Categorizes incoming documents into groups, called buckets,
      based on a specified expression and bucket boundaries.

  * - :ref:`BucketAuto() <csharp-aggregation-bucketauto>`

    - Categorizes incoming documents into a specific number of
      groups, called buckets, based on a specified expression.
      Bucket boundaries are automatically determined in an attempt
      to evenly distribute the documents into the specified number
      of buckets.

  * - :ref:`ChangeStream() <csharp-aggregation-changestream>`

    - Returns a change stream cursor for the
      collection. This stage can occur only once in an aggregation
      pipeline and it must occur as the first stage.

  * - :ref:`ChangeStreamSplitLargeEvent() <csharp-aggregation-changestreamsplitlargeevent>`

    - Splits large change stream events that exceed 16 MB into smaller fragments returned
      in a change stream cursor.

      You can use $changeStreamSplitLargeEvent only in a $changeStream pipeline, and
      it must be the final stage in the pipeline.

  * - :ref:`Count() <csharp-aggregation-count>`

    - Returns a count of the number of documents at this stage of
      the aggregation pipeline.

  * - :ref:`Densify() <csharp-aggregation-densify>`

    - Creates new documents in a sequence of documents where certain values in a field are missing.

  * - :ref:`Documents() <csharp-aggregation-documents>`
  
    - Returns literal documents from input expressions.

  * - :ref:`Facet() <csharp-aggregation-facet>`

    - Processes multiple aggregation pipelines
      within a single stage on the same set
      of input documents. Enables the creation of multi-faceted
      aggregations capable of characterizing data across multiple
      dimensions, or facets, in a single stage.

  * - :ref:`GraphLookup() <csharp-aggregation-graphlookup>`

    - Performs a recursive search on a collection. To each output
      document, adds a new array field that contains the traversal
      results of the recursive search for that document.

  * - :ref:`Group() <csharp-aggregation-group>`

    - Groups input documents by a specified identifier expression
      and applies the accumulator expressions, if specified, to
      each group. Consumes all input documents and outputs one
      document per each distinct group. The output documents 
      contain only the identifier field and, if specified, accumulated
      fields.

  * - :ref:`Limit() <csharp-aggregation-limit>`

    - Passes the first *n* documents unmodified to the pipeline,
      where *n* is the specified limit. For each input document,
      outputs either one document (for the first *n* documents) or
      zero documents (after the first *n* documents).

  * - :ref:`Lookup() <csharp-aggregation-lookup>`

    - Performs a left outer join to another collection in the
      *same* database to filter in documents from the "joined"
      collection for processing.

  * - :ref:`Match() <csharp-aggregation-match>`

    - Filters the document stream to allow only matching documents
      to pass unmodified into the next pipeline stage.
      For each input document, outputs either one document (a match) or zero
      documents (no match).

  * - :ref:`Merge() <csharp-aggregation-merge>`

    - Writes the resulting documents of the aggregation pipeline to
      a collection. The stage can incorporate (insert new
      documents, merge documents, replace documents, keep existing
      documents, fail the operation, process documents with a
      custom update pipeline) the results into an output
      collection. To use this stage, it must be
      the last stage in the pipeline.
          
  * - :ref:`Out() <csharp-aggregation-out>`

    - Writes the resulting documents of the aggregation pipeline to
      a collection. To use this stage, it must be
      the last stage in the pipeline.

  * - :ref:`Project() <csharp-aggregation-project>`

    - Reshapes each document in the stream, such as by adding new
      fields or removing existing fields. For each input document,
      outputs one document.
          
  * - :ref:`RankFusion() <csharp-aggregation-rankfusion>`

    - Uses a rank fusion algorithm to combine results from a Vector Search
      query and an Atlas Search query.
  
  * - :ref:`ReplaceRoot() <csharp-aggregation-replaceroot>`

    - Replaces a document with the specified embedded document. The
      operation replaces all existing fields in the input document,
      including the ``_id`` field. Specify a document embedded in
      the input document to promote the embedded document to the
      top level.

      The ``$replaceWith`` stage is an alias for the ``$replaceRoot`` stage.

  * - :ref:`ReplaceWith() <csharp-aggregation-replacewith>`

    - Replaces a document with the specified embedded document.
      The operation replaces all existing fields in the input document, including
      the ``_id`` field. Specify a document embedded in the input document to promote
      the embedded document to the top level.

      The ``$replaceWith`` stage is an alias for the ``$replaceRoot`` stage.

  * - :ref:`Sample() <csharp-aggregation-sample>`

    - Randomly selects the specified number of documents from its
      input.

  * - :ref:`Search() <csharp-aggregation-search>`

    - Performs a full-text search of the field or fields in an 
      :atlas:`Atlas </reference/atlas-search/query-syntax/>` 
      collection.

      This stage is available only for MongoDB Atlas clusters, and is not 
      available for self-managed deployments. To learn more, see 
      :atlas:`Atlas Search Aggregation Pipeline Stages 
      </reference/atlas-search/query-syntax>` in the Atlas documentation.

  * - :ref:`SearchMeta() <csharp-aggregation-searchMeta>`

    - Returns different types of metadata result documents for the 
      :atlas:`Atlas Search </atlas-search>` query against an 
      :atlas:`Atlas </reference/atlas-search/query-syntax/>` 
      collection. 

      This stage is available only for MongoDB Atlas clusters, 
      and is not available for self-managed deployments. To learn
      more, see :atlas:`Atlas Search Aggregation Pipeline Stages 
      </reference/atlas-search/query-syntax>` in the Atlas documentation.
      
  * - :ref:`Set() <csharp-aggregation-set>`

    - Adds new fields to documents. Like the ``Project()`` method,
      this method reshapes each
      document in the stream by adding new fields to
      output documents that contain both the existing fields
      from the input documents and the newly added fields.
      
  * - :ref:`SetWindowFields() <csharp-aggregation-setWindowFields>`

    - Groups documents into windows and applies one or more
      operators to the documents in each window.
   
      .. versionadded:: 5.0

  * - :ref:`Skip() <csharp-aggregation-skip>`

    - Skips the first *n* documents, where *n* is the specified skip
      number, and passes the remaining documents unmodified to the
      pipeline. For each input document, outputs either zero
      documents (for the first *n* documents) or one document (if
      after the first *n* documents).

  * - :ref:`Sort() <csharp-aggregation-sort>`

    - Reorders the document stream by a specified sort key. The documents remain unmodified.
      For each input document, outputs one document.

  * - :ref:`SortByCount() <csharp-aggregation-sortbycount>`

    - Groups incoming documents based on the value of a specified
      expression, then computes the count of documents in each
      distinct group.

  * - :ref:`UnionWith() <csharp-aggregation-unionwith>`

    - Combines pipeline results from two collections into a single
      result set.

  * - :ref:`Unwind() <csharp-aggregation-unwind>`

    - Deconstructs an array field from the input documents to
      output a document for *each* element. Each output document
      replaces the array with an element value. For each input
      document, outputs *n* Documents, where *n* is the number of
      array elements. *n* can be zero for an empty array.

  * - :ref:`VectorSearch() <csharp-aggregation-vectorsearch>`

    - Performs an :abbr:`ANN (Approximate Nearest Neighbor)` or 
      :abbr:`ENN (Exact Nearest Neighbor)` search on a 
      vector in the specified field of an 
      :atlas:`Atlas </reference/atlas-search/query-syntax/>` collection.

You can add stages to your pipeline that don't have corresponding type-safe
methods in the ``PipelineDefinitionBuilder`` interface by providing your query
as a ``BsonDocument`` to the `AppendStage() method
<{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.PipelineDefinitionBuilder.AppendStage.html>`__.

.. code-block:: csharp

   var pipeline = new EmptyPipelineDefinition<BsonDocument>().AppendStage<BsonDocument, BsonDocument, BsonDocument>("{ $set: { field1: '$field2' } }");

.. note:: 

   When using a ``BsonDocument`` to define your pipeline stage, the driver does
   not take into account any ``BsonClassMap``, serialization attributes or
   serialization conventions. The field names used in the ``BsonDocument`` must
   match those stored on the server.

   For more information on providing a query as a ``BsonDocument``, see our
   :ref:`FAQ page <csharp-faq-unsupported-expressions>`.