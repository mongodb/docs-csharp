.. _csharp-update-guide:

================
Update Documents
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you'll learn how to edit existing documents or upsert new documents 
in your MongoDB collections using update operations.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection
from the ``sample_restaurants`` database. The documents in this
collection use the following ``Restaurant`` class as a model:

.. literalinclude:: /includes/fundamentals/code-examples/crud/update/Restaurant.cs
   :language: csharp
   :dedent:
   :start-after: start-model
   :end-before: end-model

This collection is from the :atlas:`sample datasets </sample-data>` provided
by Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster
and load this sample data.

Update Operations
-----------------

You can perform update operations in MongoDB with the following methods:

- ``UpdateOne()``, which updates *the first document* that matches the search criteria
- ``UpdateMany()``, which updates *all documents* that match the search criteria

Required Parameters
~~~~~~~~~~~~~~~~~~~

Each update method requires the following parameters:

- A **query filter** document, which determines which records to update. See the 
  :manual:`MongoDB server manual </core/document/#query-filter-documents>` for 
  more information about query filters.
- An **update** document, which specifies the **update operator** (the kind of update to
  perform) and the fields and values that should change. See the 
  :manual:`Field Update Operators Manual page</reference/operator/update-field/>` for a complete 
  list of update operators and their usage. 

The {+driver-short+} provides a ``Builders`` class that simplifies the creation of both
query filters and update documents. The following code sample uses ``Builders`` to create
two documents for use as parameters in an update operation:
- A query filter that searches for restaurants with a ``borough`` field value of "Manhattan" 
- An update document that sets the value of the ``borough`` field of these restaurants 
to "Manhattan (north)"

.. literalinclude:: /includes/fundamentals/code-examples/crud/update/Update.cs
   :language: csharp
   :dedent:
   :start-after: start-builders
   :end-before: end-builders

.. tip:: Aggregation Pipelines in Update Operations

   If you are using MongoDB Version 4.2 or later, you can use aggregation
   pipelines made up of a subset of aggregation stages in update operations. For
   more information on the aggregation stages MongoDB supports in
   aggregation pipelines used in update operations, see our tutorial on building
   :manual:`updates with aggregation pipelines </tutorial/update-documents-with-aggregation-pipeline/>`.

Update One Document
~~~~~~~~~~~~~~~~~~~

The following code shows how to use the asynchronous ``UpdateOneAsync()`` method 
or the synchronous ``UpdateOne()`` method to update one document.

.. tabs::

   .. tab:: Asynchronous
      :tabid: update-one-async

      .. code-block:: csharp
         :copyable: true

         var result = await _restaurantsCollection.UpdateOneAsync(filter, update);

   .. tab:: Synchronous
      :tabid: update-one-sync

      .. code-block:: csharp
         :copyable: true

         var result = _restaurantsCollection.UpdateOne(filter, update);

Update Many Documents
~~~~~~~~~~~~~~~~~~~~~

The following code shows how to use the asynchronous
``UpdateManyAsync()`` method or the synchronous ``UpdateMany()`` method to
update all matched documents.

.. tabs::

   .. tab:: Asynchronous
      :tabid: update-many-async

      .. code-block:: csharp
         :copyable: true

         var result = await _restaurantsCollection.UpdateManyAsync(filter, update);

   .. tab:: Synchronous
      :tabid: update-many-sync

      .. code-block:: csharp
         :copyable: true

         var result = _restaurantsCollection.UpdateMany(filter, update);

.. tip::

   Find runnable examples that use these methods under :ref:`Additional
   Information <csharp-update-info>`.

Customize the Update Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Both methods optionally take an ``UpdateOptions`` type as an additional parameter,
which represents options you can use to configure the delete operation.
If you don't specify any ``UpdateOptions`` properties, the driver does
not customize the update operation.

The ``UpdateOptions`` type allows you to configure options with the
following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``ArrayFilters``
     - | Specifies which array elements to modify for an update operation on an array field.
         See :manual:`the MongoDB server manual</reference/command/update/#update-elements-match-arrayfilters-criteria>`
         for more information.

   * - ``BypassDocumentValidation``
     - | Specifies whether the update operation bypasses document validation. This lets you 
         update documents that don't meet the schema validation requirements, if any 
         exist. See :manual:`the MongoDB server manual</core/schema-validation/#schema-validation>`
         for more information on schema validation.

   * - ``Collation``
     - | Specifies the kind of language collation to use when sorting
         results. See :manual:`the MongoDB server manual</reference/collation/#std-label-collation>`
         for more information on collation.

   * - ``Comment``
     - | Gets or sets the user-provided comment for the operation. 
         See :manual:`the MongoDB server manual</reference/command/update/#command-fields>`
         for more information.

   * - ``Hint``
     - | Gets or sets the index to use to scan for documents. 
         See :manual:`the MongoDB server manual</reference/command/update/#std-label-update-command-hint>`
         for more information.

   * - ``IsUpsert``
     - | Specifies whether the update operation performs an upsert operation if no 
         documents match the query filter. 
         See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-command-upsert>`
         for more information.

   * - ``Let``
     - | Gets or sets the let document. 
         See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-command-upsert>`
         for more information.

Return Value
~~~~~~~~~~~~

The ``UpdateOne()`` and ``UpdateMany()`` methods each return an ``UpdateResult`` 
object. The ``UpdateResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``IsAcknowledged``
     - | Indicates whether the update operation was acknowledged by MongoDB.

   * - ``IsModifiedCountAvailable``
     - | Indicates whether you can read the count of updated records on the
         ``UpdateResult``.

   * - ``MatchedCount``
     - | The number of documents that matched the query filter, regardless of
         how many were updated.

   * - ``ModifiedCount``
     - | The number of documents updated by the update operation. If an updated
         document is identical to the original, it won't be included in this count.

   * - ``UpsertedId``
     - | The ID of the document that was upserted in the database, if the driver
         performed an upsert.

Example
~~~~~~~

The following code uses the ``UpdateMany()`` method to find all documents where the 
``borough`` field has the value "Manhattan", then updates the ``borough``
value in these documents to "Manhattan (north)". Because the ``IsUpsert`` option is 
set to ``true``, the driver inserts a new document if the query filter doesn't 
match any existing documents.

.. io-code-block::
   :copyable: true

   .. input::
      :language: csharp

        var filter = Builders<Restaurant>.Filter
            .Eq(restaurant => restaurant.Borough, "Manhattan");
            
        var update = Builders<Restaurant>.Update
            .Set(restaurant => restaurant.Borough, "Manhattan (north)");

        UpdateOptions opts = new UpdateOptions()
        {
            Comment = new BsonString("Borough updated for C# Driver Fundamentals"),
            IsUpsert = true
        };

        WriteLine("Updating documents...");
        var result = _restaurantsCollection.UpdateMany(filter, update, opts);
      
        WriteLine($"Updated documents: {result.ModifiedCount}");
        WriteLine($"Result acknowledged? {result.IsAcknowledged}");

   .. output::
      :language: none
      :visible: false
      
      Updating documents...
      Updated documents: 10259
      Result acknowledged? True

.. note::

   If the preceding example used the ``UpdateOne()`` method instead of
   ``UpdateMany()``, the driver would update only the first of the
   matched documents.

.. _csharp-update-info:

Additional Information
----------------------

For runnable examples of the delete operations, see the following usage
examples:

- :ref:`csharp-update-one`
- :ref:`csharp-update-many`

.. To learn more about performing the operations mentioned, see the
.. following guides:

.. TODO create specify a query 
.. - :ref:`csharp-query-document`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

* `UpdateOne() <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateOne.htm>`__
* `UpdateOneAsync() <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateOneAsync.htm>`__
* `UpdateMany() <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateMany.htm>`__
* `UpdateManyAsync() <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateManyAsync.htm>`__
* `UpdateOptions <{+api-root+}/T_MongoDB_Driver_UpdateOptions.htm>`__
* `UpdateResult <{+api-root+}/T_MongoDB_Driver_UpdateResult.htm>`__

