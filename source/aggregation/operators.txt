Supported Methods
-----------------

The following are some methods supported by the {+driver-long+} implementation of LINQ:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Method Name
     - Description
   
   * - ``Any``
     - Determines if any documents match the specified criteria

   * - ``Average``
     - Calculates the average of the specified fields

   * - ``Count``
     - Returns an ``Int32`` that represents the number of documents that match the specified criteria

   * - ``LongCount``
     - Returns an ``Int64`` that represents the number of documents that match the specified criteria

   * - ``DateFromString``
     - Converts a ``string`` to a ``DateTime`` object

   * - ``Distinct``
     - Returns distinct documents that match the specified criteria

   * - ``DistinctMany``
     - Returns distinct documents from an array that match the specified criteria

   * - ``Exists``
     - Tests whether a field exists

   * - ``First``
     - Returns the first matching document, and throws an exception if none are found

   * - ``FirstOrDefault``
     - Returns the first matching document, or ``null`` if none are found

   * - ``GroupBy``
     - Groups documents based on specified criteria

   * - ``GroupJoin``
     - Performs a left outer join to another collection in the same database

   * - ``IsMissing``
     - Returns ``true`` if a field is missing and false otherwies
   
   * - ``IsNullOrMissing``
     - Returns ``true`` if a field is null or missing and false otherwise

   * - ``Max``
     - Returns the document with the maximum specified value

   * - ``OfType``
     - Returns documents that match the specified type

   * - ``OrderBy``, ``OrderByDescending``
     - Returns results in a specified sort order

   * - ``ThenBy``, ``ThenByDescending``
     - Allows a secondary sort to be specified

   * - ``Select``
     - Selects documents based on specified criteria

   * - ``SelectMany``
     - Projects each element of a sequence and combines the resulting sequences into one document

   * - ``Single``
     - Returns the only matching document, and throws an exception if there is not exactly one document
   
   * - ``SingleOrDefault``
     - Returns a single matching document or ``null`` if no documents match

   * - ``Skip``
     - Skips over a specified number of documents and returns the rest of the results

   * - ``Sum``
     - Returns the sum of the values in a specified field

   * - ``Take``
     - Specifies the number of results to return

   * - ``Where``
     - Returns all documents that match your specified criteria

Bitwise Operators
~~~~~~~~~~~~~~~~~

This section describes the :wikipedia:`bitwise operators <Bitwise_operation>`
supported by the {+driver-short+} that you can use in an aggregation pipeline.
You can use multiple bitwise operators in the same 
stage. The following guidelines apply when using bitwise operators:

- All operands must be of type ``int`` or ``long``.

- ``$bitAnd``, ``$bitOr``, and ``$bitXor`` take two or more operands. ``$bitNot`` takes one operand.

- Bitwise operations are evaluated from left to right.

The examples in this section use the following documents in a collection called
``ingredients``:

.. code-block:: json

   { "_id" : 1, "name" : "watermelon", "is_available" : 1, "is_cheap" : 1 },
   { "_id" : 2, "name" : "onions", "is_available" : 1, "is_cheap" : 0 },
   { "_id" : 3, "name" : "eggs", "is_available" : 0, "is_cheap" : 0 },
   { "_id" : 4, "name" : "potatoes", "is_available" : 1, "is_cheap" : 1 },
   { "_id" : 5, "name" : "pasta", "is_available" : 0, "is_cheap" : 1 },
   { "_id" : 6, "name" : "cheese", "is_available" : 1 }

The ``"is_available"`` field represents if an ingredient is available. If this
field has a value of ``0``, the ingredient is not available. If it has a value
of ``1``, the ingredient is available.

The ``"is_cheap"`` field represents if an ingredient is cheap. If this field has
a value of ``0``, the ingredient is not cheap. If it has a value of ``1``, the
ingredient is cheap.

The following ``Ingredient`` class models the documents in the ``ingredients``
collection:

.. literalinclude:: /includes/fundamentals/code-examples/linq.cs
   :language: csharp
   :dedent:
   :start-after: start-ingredient-model
   :end-before: end-ingredient-model

.. note:: Missing or Undefined Operands

   If the operands you pass to any bitwise operator are of type `nullable <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types>`__
   ``int`` or ``long`` and contain a missing or undefined value, the entire expression 
   evaluates to ``null``. If the operands are of type non-nullable ``int`` or 
   ``long`` and contain a missing or undefined value, the {+driver-short+} will
   throw an error.

$bitAnd
+++++++

The ``$bitAnd`` aggregation operator performs a bitwise AND operation on the given
arguments. You can use the ``$bitAnd`` operator by connecting two or more 
clauses with a ``&`` character. 

The following example shows how to create a ``$bitAnd`` stage by using LINQ. The
code retrieves the document in which the ``Name`` field has the 
value ``"watermelon"``. It then performs a bitwise AND operation on the values of the 
``IsAvailable`` and ``IsCheap`` fields in this document.

.. literalinclude:: /includes/fundamentals/code-examples/linq.cs
   :language: csharp
   :dedent:
   :start-after: start-bitAnd-example
   :end-before: end-bitAnd-example

The preceding code returns ``1``, the result of the AND operation on the values
of the ``IsAvailable`` field (``1``) and the ``IsCheap`` field (``1``).

The following example performs the same bitwise AND operation on all 
documents in the collection:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-examples/linq.cs
      :language: csharp
      :dedent:
      :start-after: start-bitAnd-collection-example
      :end-before: end-bitAnd-collection-example

   .. output::
      :language: json
      :visible: false
      
      1
      0
      0
      1
      0
      null

The ``null`` result comes from the document where the ``Name`` field
has the value of ``"cheese"``. This document is missing an ``IsCheap`` field, so
the expression evaluates to ``null``.

$bitOr
++++++

The ``$bitOr`` aggregation operator performs a bitwise OR operation on the given
arguments. You can use the ``$bitOr`` operator by connecting two or more 
clauses with a ``|`` character. 

The following example shows how to create a ``$bitOr`` stage by using LINQ. The
code retrieves the document in which the ``Name`` field has the 
value ``"onions"``. It then performs a bitwise OR operation on the values of the 
``IsAvailable`` and ``IsCheap`` fields in this document.

.. literalinclude:: /includes/fundamentals/code-examples/linq.cs
   :language: csharp
   :dedent:
   :start-after: start-bitOr-example
   :end-before: end-bitOr-example

The preceding code returns ``1``, the result of the OR operation on the values
of the ``IsAvailable`` field (``1``) and the ``IsCheap`` field (``0``).

$bitNot
+++++++

The ``$bitNot`` aggregation operator performs a bitwise NOT operation on the given
argument. You can use the ``$bitNot`` operator by preceding an 
operand with a ``~`` character. ``$bitNot`` only takes one argument. The 
following example shows how to create a ``$bitNot`` stage by using LINQ:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-examples/linq.cs
      :language: csharp
      :dedent:
      :start-after: start-bitNot-example
      :end-before: end-bitNot-example

   .. output:: 
      :language: json
      :visible: false

      -2
      -1
      -1
      -2
      -2
      null

$bitXor
+++++++

The ``$bitXor`` aggregation operator performs a bitwise XOR operation on the given
arguments. You can use the ``$bitXor`` operator by connecting two or more 
clauses with a ``^`` character. 

The following example shows how to create a ``$bitXor`` stage by using LINQ. The
code retrieves the documents in which the ``Name`` field has 
the value ``"watermelon"`` or ``"onions"``. It then performs a bitwise XOR 
operation on the values of the ``IsAvailable`` and ``IsCheap`` fields in these 
documents.

.. literalinclude:: /includes/fundamentals/code-examples/linq.cs
   :language: csharp
   :dedent:
   :start-after: start-bitXor-example
   :end-before: end-bitXor-example

The result contains the following values:

.. code-block:: json
   
   0
   1