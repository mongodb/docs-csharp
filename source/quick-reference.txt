.. _csharp-quick-reference:

===============
Quick Reference
===============

.. default-domain:: mongodb

This page shows the driver syntax for several MongoDB commands and links to
their related reference and API documentation.

TODO: LINQ link

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Command
     - Syntax

   * - | **Find a Document**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_Find.htm>`__
       | :ref:`Usage Example <csharp-findone>`
       | :ref:`Fundamentals <csharp-fundamentals-retrieve-data>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter.Eq(r => r.Name, "Bagels N Buns");

             var restaurant = _restaurantsCollection.Find(filter).FirstOrDefault();

          .. output::
             :language: json

             { name : "Bagels N Buns", restaurant_id : "40363427", ... }

   * - | **Find a Document (Async)**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_Find.htm>`__
       | :ref:`Usage Example <csharp-findone>`
       | :ref:`Fundamentals <csharp-fundamentals-retrieve-data>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter.Eq(r => r.Name, "Bagels N Buns");

             return await _restaurantsCollection.Find(filter).FirstOrDefaultAsync();

          .. output::
             :language: json

             { name : "Bagels N Buns", restaurant_id : "40363427", ... }


   * - | **Find Multiple Documents**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_Find.htm>`__
       | :ref:`Usage Example <csharp-findmultiple>`
       | :ref:`Fundamentals <csharp-fundamentals-retrieve>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter
             .Eq(r => r.Cuisine, "Pizza");

             var restaurants = _restaurantsCollection.Find(filter).ToList();

          .. output::
             :language: json

             [
               { name: "Como Pizza", cuisine: "Pizza", ... },
               { name: "New York Pizza Suprema", cuisine: "Pizza", ... },
               ...
             
             ]

   * - | **Find Multiple Documents (Async)**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_Find.htm>`__
       | :ref:`Usage Example <csharp-findmultiple>`
       | :ref:`Fundamentals <csharp-fundamentals-retrieve>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter
             .Eq(r => r.Cuisine, "Pizza");

             return await _restaurantsCollection.Find(filter).ToListAsync();

          .. output::
             :language: json

             [
               { name: "Como Pizza", cuisine: "Pizza", ... },
               { name: "New York Pizza Suprema", cuisine: "Pizza", ... },
               ...
             ]

   * - | **Insert a Document**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollection_1_InsertOne.htm>`__ 
       | :ref:`Usage Example <csharp-insert-one>`
       | :ref:`Fundamentals <csharp-insert-guide>`

     - .. code-block:: csharp
          :copyable: true

          _restaurantsCollection.InsertOne(new BsonDocument("name", "Mongo's Pizza"));

   * - | **Insert a Document (Async)**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollection_1_InsertOneAsync.htm>`__
       | :ref:`Usage Example <csharp-insert-one>`
       | :ref:`Fundamentals <csharp-insert-guide>`

     - .. code-block:: csharp
          :copyable: true

          await _restaurantsCollection.InsertOneAsync(new BsonDocument("name", "Mongo's Pizza"));

   * - | **Insert Multiple Documents**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollection_1_InsertMany.htm>`__ 
       | :ref:`Usage Example <csharp-insert-many>`
       | :ref:`Fundamentals <csharp-insert-guide>`

     - .. code-block:: csharp
          :copyable: true

          _restaurantsCollection.InsertMany(new List<BsonDocument>
          {
              new BsonDocument("name", "Mongo's Pizza"),
              new BsonDocument("name", "Mongo's Pizza 2")
          });

  * - | **Insert Multiple Documents (Async)**
       |
       | `API Documentation <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_InsertManyAsync.htm>`__
       | :ref:`Usage Example <csharp-insert-many>`
       | :ref:`Fundamentals <csharp-insert-guide>`

     - .. code-block:: csharp
          :copyable: true

          await _restaurantsCollection.InsertManyAsync(new List<BsonDocument>
          {
              new BsonDocument("name", "Mongo's Pizza"),
              new BsonDocument("name", "Mongo's Pizza 2")
          });

   * - | **Update a Document**
       |
       | `API Documentation <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateOne.htm>`__
       | :ref:`Usage Example <csharp-update-one>`
       | :ref:`Fundamentals <csharp-update-guide>`

     - .. code-block::
          :copyable: true

          .. input::
             :language: csharp 

             var filter = Builders<Restaurant>.Filter
             .Eq(restaurant => restaurant.Name, "Bagels N Buns");

             var update = Builders<Restaurant>.Update
             .Set(restaurant => restaurant.Name, "2 Bagels 2 Buns");

             var result = _restaurantsCollection.UpdateOne(filter, update);

   * - | **Update a Document (Async)**
       |
       | `API Documentation <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateOneAsync.htm>`__
       | :ref:`Usage Example <csharp-update-one>`
       | :ref:`Fundamentals <csharp-update-guide>`

     - .. code-block::
          :copyable: true

          .. input::
             :language: csharp 

             var filter = Builders<Restaurant>.Filter
             .Eq(restaurant => restaurant.Name, "Bagels N Buns");

             var update = Builders<Restaurant>.Update
             .Set(restaurant => restaurant.Name, "2 Bagels 2 Buns");

             return await _restaurantsCollection.UpdateOneAsync(filter, update);

   * - | **Update Multiple Documents**
       |
       | `API Documentation <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateMany.htm>`__
       | :ref:`Usage Example <csharp-update-many>`
       | :ref:`Fundamentals <csharp-update-guide>`

     - .. code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter
             .Eq(restaurant => restaurant.Cuisine, "Pizza");

             var update = Builders<Restaurant>.Update
             .Set(restaurant => restaurant.Cuisine, "Pasta and breadsticks");

            var result = _restaurantsCollection.UpdateMany(filter, update);

   * - | **Update Multiple Documents (Async)**
       |
       | `API Documentation {+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateManyAsync.htm>`__ 
       | :ref:`Usage Example <csharp-update-many>`
       | :ref:`Fundamentals <csharp-update-guide>`

     - .. code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter
             .Eq(restaurant => restaurant.Cuisine, "Pizza");

             var update = Builders<Restaurant>.Update
             .Set(restaurant => restaurant.Cuisine, "Pasta and breadsticks");

            return await = _restaurantsCollection.UpdateManyAsync(filter, update);

   * - | **Update an Array in a Document**
       |
       | `API Documentation <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_UpdateOne.htm>`__
       | :ref:`Usage Example <csharp-update-one>`
       | :ref:`Fundamentals <csharp-update-guide>`

     - .. code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter
             .Eq(restaurant => restaurant.Name, "Bagels N Buns");

            var update = Builders<Restaurant>.Update
            .Push(restaurant => restaurant.Grades, new BsonDocument()
            {
                { "date" , DateTime.Now.ToUniversalTime()},
                { "grade" , "A"}, 
                { "score", 10}
            });

            var result = _restaurantsCollection.UpdateOne(filter, update);
             
   * - | **Replace a Document**
       |
       | `API Documentation <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_ReplaceOne.htm>`__
       | :ref:`Usage Example <csharp-replace-one>`
       | TODO: :ref:`Fundamentals`  

     - .. code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter.Eq(r => r.Cuisine, "Pizza");

             // Find ID of first pizza restaurant
             var oldPizzaRestaurant = _restaurantsCollection.Find(filter).First();
             var oldId = oldPizzaRestaurant.Id;

            Restaurant newPizzaRestaurant = new()
            {
                Id = oldId,
                Name = "Mongo's Pizza",
                Cuisine = "Pizza",
                Address = new BsonDocument
                {
                    {"street", "Pizza St"},
                    {"zipcode", "10003"},
                },
                Borough = "Manhattan",
            };

            return _restaurantsCollection.ReplaceOne(filter, newPizzaRestaurant);

 * - | **Replace a Document (Async)**
       |
       | `API Documentation <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_ReplaceOneAsync.htm>`__
       | :ref:`Usage Example <csharp-replace-one>`
       | TODO: :ref:`Fundamentals`  

     - .. code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter.Eq(r => r.Cuisine, "Pizza");

             // Find ID of first pizza restaurant
             var oldPizzaRestaurant = _restaurantsCollection.Find(filter).First();
             var oldId = oldPizzaRestaurant.Id;

            Restaurant newPizzaRestaurant = new()
            {
                Id = oldId,
                Name = "Mongo's Pizza",
                Cuisine = "Pizza",
                Address = new BsonDocument
                {
                    {"street", "Pizza St"},
                    {"zipcode", "10003"},
                },
                Borough = "Manhattan",
            };

            return await _restaurantsCollection.ReplaceOneAsync(filter, newPizzaRestaurant);

   * - | **Delete a Document**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_DeleteOne.htm>`__
       | :ref:`Usage Example <csharp-delete-one>`
       | :ref:`Fundamentals <csharp-delete-guide>`

     - .. code-block:: csharp
          :copyable: true

          var filter = Builders<Restaurant>.Filter
          .Eq(r => r.Name, "Ready Penny Inn");

          return _restaurantsCollection.DeleteOne(filter);
          
   * - | **Delete a Document (Async)**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_DeleteOneAsync.htm>`__
       | :ref:`Usage Example <csharp-delete-one>`
       | :ref:`Fundamentals <csharp-delete-guide>`

     - .. code-block:: csharp
          :copyable: true

          var filter = Builders<Restaurant>.Filter
          .Eq(r => r.Name, "Ready Penny Inn");

          return await _restaurantsCollection.DeleteOneAsync(filter);
          
   * - | **Delete Multiple Documents**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_DeleteMany.htm>`__ 
       | :ref:`Usage Example <csharp-delete-many>`
       | :ref:`Fundamentals <csharp-delete-guide>`

     - .. code-block:: csharp
          :copyable: true
 
          var filter = Builders<Restaurant>.Filter
          .Regex(r => r.Name, "Green");

          return _restaurantsCollection.DeleteMany(filter);

   * - | **Delete Multiple Documents (Async)**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_DeleteMany.htm>`__ 
       | :ref:`Usage Example <csharp-delete-many>`
       | :ref:`Fundamentals <csharp-delete-guide>`

     - .. code-block:: csharp
          :copyable: true
 
          var filter = Builders<Restaurant>.Filter
          .Regex(r => r.Name, "Green");

          return await _restaurantsCollection.DeleteManyAsync(filter);

   * - | **Access Data from a Cursor Iteratively**
       |
       | `API Documentation <{+api-root+}/T_MongoDB_Driver_IAsyncCursor_1.htm>`__

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter
               .Eq(restaurant => restaurant.Cuisine, "Afghan";

             var cursor = _restaurantsCollection.Find(filter).ToCursor(); 
             cursor.MoveNext();
             foreach (Restaurant r in cursor.Current)
             {
                 WriteLine(r.ToJson());
             }   

          .. output::
             :language: json

             [
               { name: "Afghan Kebab House", ... },
               { name: "Khyber Pass", ... },
               ...
             ]

   * - | **Count Documents**
       |
       | `API Documentation <{+api-root+}/Overload_MongoDB_Driver_IMongoCollection_1_CountDocuments.htm>`__

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp
             
             var filter = Builders<Restaurant>.Filter
             .Eq(restaurant => restaurant.Cuisine, "Pizza");

             return _restaurantsCollection.Find(filter).CountDocuments();

          .. output::
             :language: none

             1163

   * - | **List the Distinct Documents or Field Values**
       | `API Documentation <+api-root+}/Overload_MongoDB_Driver_MongoCollection_Distinct.htm>`__

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp
            
             var filter = Builders<Restaurant>.Filter.Empty;
             return _restaurantsCollection.Distinct(new StringFieldDefinition<Restaurant, String>("cuisine"), filter);
 
          .. output::
             :language: json

             [ Afghan, African, American, Armenian, Asian, ... ]

   * - | **Limit the Number of Documents Retrieved**
       |
       | `API Documentation <+api-root+}/P_MongoDB_Driver_Core_Operations_FindOperation_1_Limit.htm>`__

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var filter = Builders<Restaurant>.Filter
               .Eq(restaurant => restaurant.Cuisine, "Asian");
             return _restaurantsCollection.Find(filter).Limit(2).ToList();

          .. output::
             :language: json

             [
               { name: "China Grill", ... },
               { name: "Indo Chine", ... }
             ]

   * - | **Skip Retrieved Documents**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#skip(int)>`__
       | :ref:`Fundamentals <java-fundamentals-skip>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find(Filters.regex("title", "^Rocky")).skip(2);

          .. output::
             :language: json

             [
               { title: 'Rocky III', ... },
               { title: 'Rocky IV', ... },
               { title: 'Rocky V', ... }
             ]

   * - | **Sort the Documents When Retrieving Them**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#sort(org.bson.conversions.Bson)>`__
       | :ref:`Fundamentals <java-fundamentals-sort>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find().sort(Sorts.ascending("year"));

          .. output::
             :language: json

             [
               { title: 'Newark Athlete', year: 1891, ... },
               { title: 'Blacksmith Scene', year: 1893, ...},
               { title: 'Dickson Experimental Sound Film', year: 1894},
               ...
             ]

   * - | **Project Document Fields When Retrieving Them**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#projection(org.bson.conversions.Bson)>`__
       | :ref:`Usage Example <java-usage-find>`
       | :ref:`Fundamentals <java-fundamentals-project>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             coll.find().projection(Projections.fields(
                    Projections.excludeId(),
                    Projections.include("year", "imdb")));

          .. output::
             :language: json

             [
               { year: 2012, imdb: { rating: 5.8, votes: 230, id: 8256 }},
               { year: 1985, imdb: { rating: 7.0, votes: 447, id: 1654 }},
               ...
             ]

   * - | **Create an Index**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#createIndex(org.bson.conversions.Bson)>`__
       | :ref:`Fundamentals <java-fundamentals-indexes>`

     - .. code-block:: java
          :copyable: true

          coll.createIndex(
                  Indexes.compoundIndex(
                          Indexes.ascending("title"),
                          Indexes.descending("year")));

   * - | **Search Text**
       |
       | `API Documentation <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#find()>`__
       | :ref:`Fundamentals <java-fundamentals-search-text>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: java

             // only searches fields with text indexes
             coll.find(Filters.text("zissou"));

          .. output::
             :language: json

             [
               { title: 'The Life Aquatic with Steve Zissou', ... }
             ]



