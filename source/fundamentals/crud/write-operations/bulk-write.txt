.. _csharp-bulk-write:

=====================
Bulk Write Operations
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: insert, update, replace, code example

Overview
--------

Consider a scenario in which you want to insert a document into a collection,
update multiple other documents, then delete a document. If you use
individual methods, each operation requires its own database call. This guide
shows you how to use bulk write operations to perform multiple write operations
in a single database call.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:ref:`<csharp-get-started>` tutorial.

Define the Write Operations
---------------------------

For each write operation you want to perform, create an instance of one of
the following operation classes:

- ``BulkWriteInsertOneModel<TDocument>``
- ``BulkWriteUpdateOneModel<TDocument>``
- ``BulkWriteUpdateManyModel<TDocument>``
- ``BulkWriteReplaceOneModel<TDocument>``
- ``BulkWriteDeleteOneModel<TDocument>``
- ``BulkWriteDeleteManyModel<TDocument>``

Then, pass an ``IReadOnlyList`` of the instances you created to the
``MongoClient.BulkWrite()`` or ``MongoClient.BulkWriteAsync()`` method.

The following sections show how to create and use instances of the preceding classes.

.. tip:: Bulk Write Operations with POCOs

    The examples in this guide use ``BsonDocument`` as the type for ``TDocument``.
    You can also use a Plain Old CLR Objects (POCO) as the type for ``TDocument``.
    
    To use a POCO, define a class that represents the documents in your collection.
    The class must have properties that match the fields in your documents.
    For more information, see :ref:`<csharp-poco>`.

Insert Operations
~~~~~~~~~~~~~~~~~

To perform an insert operation, create an instance of the
``BulkWriteInsertOneModel<TDocument>`` class.
The ``BulkWriteInsertOneModel<TDocument>`` constructor accepts the following parameters:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 10 10 20 (Optional)

   * - Parameter
     - Description
   
   * - ``collectionNamespace``
     - | The database and collection to insert the BSON document into.
       |
       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__

   * - ``document``
     - | The document to insert into the collection.
       |
       | **Data Type:** ``TDocument``

The following example creates an instance of the ``BulkWriteInsertOneModel<TDocument>``
class. The
``BsonDocument`` object represents a new restaurant named "Mongo's Deli" to be inserted
into the ``sample_restaurants.restaurants`` collection.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-insert-one
   :end-before: end-bulk-insert-one
   :language: csharp
   :copyable:
   :dedent: 8

.. tip:: Insert Multiple Documents
    
   To insert multiple documents, create an instance of the
   ``BulkWriteInsertOneModel<TDocument>`` class for each document you want to insert.

Update Operations
~~~~~~~~~~~~~~~~~

To update a document, create an instance of the ``BulkWriteUpdateOneModel<TDocument>``
class. The ``BulkWriteUpdateOneModel<TDocument>`` constructor accepts the following
parameters:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Parameter
     - Description
   
   * - ``collectionNamespace``
     - | The database and collection to insert the BSON document into.
       |
       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__

   * - ``filter``
     - | The **query filter** that specifies the criteria used to match documents in your collection.
       | The ``UpdateOne`` operation updates *only the first document* that matches the
       | query filter.
       |
       | **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

   * - ``update``
     - | The update operation you want to perform. For more information about update
       | operations, see
       | :manual:`Field Update Operators </reference/operator/update-field/>` in the
       | {+mdb-server+} manual.
       |
       | **Data Type:** `UpdateDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateDefinition-1.html>`__

   * - ``collation``
     - | *Optional.* The language collation to use when sorting results. See
       | :manual:`the delete statements</reference/command/delete/#std-label-deletes-array-collation>`
         for more information.
       |
       | **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__
       | **Default:** ``null``
   
   * - ``hint``
     - | *Optional.* The index to use to scan for documents. 
         See :manual:`the MongoDB server manual</reference/command/update/#std-label-update-command-hint>`
         for more information.
       |
       | **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__
       | **Default:** ``null``

   * - ``isUpsert``
     - | *Optional.* Specifies whether the update operation performs an upsert operation if no 
       | documents match the query filter. 
       | See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-command-upsert>`
       | for more information.
       |
       | **Data Type:** {+bool-data-type+}
       | **Default:** ``false``

   * - ``arrayFilters``
     - | Specifies which array elements to modify for an update operation on an array field.
       | See :manual:`the MongoDB server manual</reference/command/update/#update-elements-match-arrayfilters-criteria>`
       | for more information.
       |
       | **Data Type:** `IEnumerable<ArrayFilterDefinition> <https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-8.0>`__ 
       | **Default:** ``null``

The following example creates an instance of the ``BulkWriteUpdateOneModel<TDocument>``
class, and uses ``BsonDocument`` as the type for ``TDocument``. The
filter matches the first document in the ``sample_restaurants.restaurants`` collection
where the value of the ``name`` field is ``"Mongo's Deli"``. The update operation sets
the value of the ``cuisine`` field to ``"Sandwiches and Salads"``.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-update-one
   :end-before: end-bulk-update-one
   :language: csharp
   :copyable:
   :dedent: 8

To update multiple documents, create an instance of the
``BulkWriteUpdateManyModel<TDocument>`` class. The constructor for this class
accepts the same parameters as the ``BulkWriteUpdateOneModel<TDocument>`` constructor.
The ``BulkWriteUpdateManyModel<TDocument>``
operation updates *all documents* that match your query filter.

The following example creates an instance of the ``BulkWriteUpdateManyModel<TDocument>``
class, and uses ``BsonDocument`` as the type for ``TDocument``. The
filter matches all documents in the ``sample_restaurants.restaurants`` collection
where the value of the ``name`` field is ``"Mongo's Deli"``. The update operation sets
the value of the ``cuisine`` field to ``"Sandwiches and Salads"``.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-update-many
   :end-before: end-bulk-update-many
   :language: csharp
   :copyable:
   :dedent: 8

Replace Operations
~~~~~~~~~~~~~~~~~~

To replace the fields in a document, create an instance of the
``BulkWriteReplaceOneModel<TDocument>`` class. The ``BulkWriteReplaceOneModel<TDocument>``
constructor accepts the following parameters:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Parameter
     - Description
   
   * - ``collectionNamespace``
     - | The database and collection to insert the BSON document into.
       |
       | **Data Type:** {+string-data-type+} or `CollectionNamespace <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.CollectionNamespace.html>`__

   * - ``filter``
     - | The **query filter** that specifies the criteria used to match documents in your collection.
       | The ``UpdateOne`` operation updates *only the first document* that matches the
       | query filter.
       |
       | **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

   * - ``replacement``
     - | The replacement document, which specifies the fields and values to insert in the
       | target document.
       |
       | **Data Type:** ``TDocument``

   * - ``collation``
     - | *Optional.* The language collation to use when sorting results. See
       | :manual:`the delete statements</reference/command/delete/#std-label-deletes-array-collation>`
         for more information.
       |
       | **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__
       | **Default:** ``null``
   
   * - ``hint``
     - | *Optional.* The index to use to scan for documents. 
         See :manual:`the MongoDB server manual</reference/command/update/#std-label-update-command-hint>`
         for more information.
       |
       | **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__
       | **Default:** ``null``

   * - ``isUpsert``
     - | *Optional.* Specifies whether the update operation performs an upsert operation if no 
       | documents match the query filter. 
       | See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-command-upsert>`
       | for more information.
       |
       | **Data Type:** {+bool-data-type+}
       | **Default:** ``false``

The following example creates an instance of the ``BulkWriteReplaceOneyModel<TDocument>``
class, and uses ``BsonDocument`` as the type for ``TDocument``. The
filter matches the document in the ``sample_restaurants.restaurants`` collection
where the value of the ``restaurant_id`` field is ``"1234"``. The replace operation
removes all fields from this document and sets new values in the ``name``, ``cuisine``,
``borough``, and ``restaurant_id`` fields.

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-replace-one
   :end-before: end-bulk-replace-one
   :language: csharp
   :copyable:
   :dedent: 8

.. tip:: Replace Multiple Documents
    
   To replace multiple documents, you must create an instance of the
   ``BulkWriteReplaceOneModel<TDocument>`` class for each document you want to replace.

Delete Operations
~~~~~~~~~~~~~~~~~

To delete a document, create an instance of the ``BulkWriteDeleteOneModel`` and pass in
a query filter that specifies the document that you want to delete. The
``BulkWriteDeleteOneModel`` operation removes
only the *first document* that matches your query filter.

The following example creates an instance of the ``BulkWriteDeleteOneModel`` class:

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-delete-one
   :end-before: end-bulk-delete-one
   :language: csharp
   :copyable:
   :dedent: 8

To delete multiple documents, create an instance of the ``BulkWriteDeleteManyModel``
class and pass a query filter that specifies the document that you want to delete.
The ``BulkWriteDeleteManyModel`` operation removes *all* documents that match your
query filter.

The following example creates an instance of the ``BulkWriteDeleteManyModel`` class:

.. literalinclude:: /includes/fundamentals/code-examples/BulkWrite.cs
   :start-after: start-bulk-delete-many
   :end-before: end-bulk-delete-many
   :language: csharp
   :copyable:
   :dedent: 8

Call the ``BulkWrite()`` Method
--------------------------------

After you define a ``BulkWriteModel`` instance for each operation that you want to perform,
pass an ``IList`` of these instances to the ``BulkWrite()`` or ``BulkWriteAsync()`` method.
By default, these methods run the operations in the order
they're defined in the list.

The following code examples show how to use the asynchronous
``BulkWriteAsync()`` method and the synchronous ``BulkWrite()`` method to
perform multiple write operations.

.. io-code-block::

   .. input:: /includes/fundamentals/code-examples/BulkWrite.cs
      :start-after: start-bulk-write-mixed
      :end-before: end-bulk-write-mixed
      :language: csharp
      :dedent: 8

   .. output::
      
      BulkWriteResult({'writeErrors': [], 'writeConcernErrors': [], 'nInserted': 2, 'nUpserted': 0, 'nMatched': 2, 'nModified': 2, 'nRemoved': 1, 'upserted': []}, acknowledged=True)

If any of the write operations fail, the {+driver-short+} raises a
``BulkWriteException`` and does not perform any further operations.
``BulkWriteException`` provides a ``details`` attribute that includes the operation
that failed, and details about the exception.

.. note::

   When the {+driver-short+} executes a bulk write operation, it uses the
   ``WriteConcern`` of the
   collection on which the operation is running. The driver reports all write
   concern errors after attempting all operations, regardless of execution order. 

Customize Bulk Write Operations
-------------------------------

The ``bulk_write()`` method optionally accepts additional
parameters, which represent options you can use to configure the bulk write
operation. If you don't specify any additional options, the driver does not customize
the bulk write operation.

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``ordered``
     - | If ``True``, the driver performs the write operations in the order
         provided. If an error occurs, the remaining operations are not
         attempted. 
       |
       | If ``False``, the driver performs the operations in an
         arbitrary order and attempts to perform all operations.
       | Defaults to ``True``.

   * - ``bypass_document_validation``
     - | Specifies whether the operation bypasses document-level validation. For more
         information, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the MongoDB
         Server manual.
       | Defaults to ``False``.

   * - ``session``
     - | An instance of ``ClientSession``. For more information, see the `API
         documentation <{+api-root+}pymongo/client_session.html#pymongo.client_session.ClientSession>`__.

   * - ``comment``
     - | A comment to attach to the operation. For more information, see the :manual:`delete command
         fields </reference/command/delete/#command-fields>` guide in the
         {+mdb-server+} manual.

   * - ``let``
     - | A map of parameter names and values. Values must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/delete/#std-label-delete-let-syntax>` in the
         {+mdb-server+} manual.

The following example calls the ``bulk_write()`` method from the preceding example, with the ``ordered`` option set
to ``False``:

.. literalinclude:: /includes/write/bulk-write.py
   :start-after: start-bulk-write-unordered
   :end-before: end-bulk-write-unordered
   :language: python
   :copyable:

If any of the write operations in an unordered bulk write fail, {+driver-short+}
reports the errors only after attempting all operations.

.. note::

   Unordered bulk operations do not guarantee order of execution. The order can
   differ from the way you list them to optimize the runtime.

Return Value
------------

The ``bulk_write()`` method returns a ``BulkWriteResult`` object. The
``BulkWriteResult`` object contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``acknowledged``
     - | Indicates if the server acknowledged the write operation.

   * - ``bulk_api_result``
     - | The raw bulk API result returned by the server.
         
   * - ``deleted_count``
     - | The number of documents deleted, if any.

   * - ``inserted_count``
     - | The number of documents inserted, if any.

   * - ``matched_count``
     - | The number of documents matched for an update, if applicable.

   * - ``modified_count``
     - | The number of documents modified, if any.

   * - ``upserted_count``
     - | The number of documents upserted, if any.

   * - ``upserted_ids``
     - | A map of the operation's index to the ``_id`` of the upserted documents, if
         applicable.

Additional Information
----------------------

To learn how to perform individual write operations, see the following guides:

- :ref:`pymongo-write-insert`
- :ref:`pymongo-write-update`
- :ref:`pymongo-write-replace`
- :ref:`pymongo-write-delete`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `bulk_write() <{+api-root+}pymongo/collection.html#pymongo.collection.Collection.bulk_write>`__
- `InsertOne <{+api-root+}pymongo/operations.html#pymongo.operations.InsertOne>`__
- `UpdateOne <{+api-root+}pymongo/operations.html#pymongo.operations.UpdateOne>`__
- `UpdateMany <{+api-root+}pymongo/operations.html#pymongo.operations.UpdateMany>`__
- `ReplaceOne <{+api-root+}pymongo/operations.html#pymongo.operations.ReplaceOne>`__
- `DeleteOne <{+api-root+}pymongo/operations.html#pymongo.operations.DeleteOne>`__
- `DeleteMany <{+api-root+}pymongo/operations.html#pymongo.operations.DeleteMany>`__
- `BulkWriteResult <{+api-root+}pymongo/results.html#pymongo.results.BulkWriteResult>`__
- `BulkWriteError <{+api-root+}pymongo/errors.html#pymongo.errors.BulkWriteError>`__
