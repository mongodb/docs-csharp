.. _pymongo-enterprise-auth:

Enterprise Authentication Mechanisms
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: ldap, encryption, principal, tls

Overview
--------

MongoDB Enterprise Edition includes authentication mechanisms that aren't
available in MongoDB Community Edition. 
In this guide, you can learn how to authenticate to MongoDB by using these
authentication mechanisms. To learn about the other authentication mechanisms available
in MongoDB, see :ref:`<pymongo-auth>`.

.. _pymongo-kerberos:

Kerberos
--------

The Generic Security Services API (GSSAPI) provides an interface for Kerberos
authentication. Select the tab that corresponds to your operating system to learn how
to use Kerberos to authenticate.

.. tabs::

   .. tab:: Unix
      :tabid: unix

      First, use pip or easy_install to install the Python
      `kerberos <http://pypi.python.org/pypi/kerberos>`__ or
      `pykerberos <https://pypi.python.org/pypi/pykerberos>`__ module.

      After installing one of these modules, run the ``kinit`` command to obtain and cache
      an initial ticket-granting ticket. The following example uses the
      ``knit`` command to obtain a ticket-granting ticket for the principal
      ``mongodbuser@EXAMPLE.COM``. It then uses the ``klist``
      command to display the principal and ticket in the credentials cache.

      .. code-block:: sh
         :copyable: false
      
         $ kinit mongodbuser@EXAMPLE.COM
         mongodbuser@EXAMPLE.COM's Password:
         $ klist
         Credentials cache: FILE:/tmp/krb5cc_1000
                 Principal: mongodbuser@EXAMPLE.COM

           Issued                Expires               Principal
         Feb  9 13:48:51 2013  Feb  9 23:48:51 2013  krbtgt/mongodbuser@EXAMPLE.COM

      After you obtain a ticket-granting ticket, set the following connection options:

      - ``username``: The Kerbos principal to authenticate. Percent-encode this value
        before including it in a connection URI.
      - ``authMechanism``: Set to ``"GSSAPI"``.
      - ``authMechanismProperties``: Optional. By default, MongoDB uses ``mongodb`` as
        the authentication service name. To specify a different service name, set
        this option to ``"SERVICE_NAME:<authentication service name>"``.

      You can set these options in two ways: by passing arguments to the
      ``MongoClient`` constructor or through parameters in your connection
      string.
      
      .. include:: /includes/authentication/auth-properties-commas.rst

      .. tabs::

         .. tab:: MongoClient
            :tabid: mongoclient

            .. code-block:: python

               client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                            username="mongodbuser@EXAMPLE.COM",
                                            authMechanism="GSSAPI",
                                            authMechanismProperties="SERVICE_NAME:<authentication service name>")

         .. tab:: Connection String
            :tabid: connectionstring

            .. code-block:: python

               uri = ("mongodb://mongodbuser%40EXAMPLE.COM@<hostname>:<port>/?"
                      "&authMechanism=GSSAPI"
                      "&authMechanismProperties=SERVICE_NAME:<authentication service name>")
               client = pymongo.MongoClient(uri)

   .. tab:: Windows (SSPI)
      :tabid: windows
       
      First, install the `winkerberos <https://pypi.python.org/pypi/winkerberos/>`__ module.
      Then, set the following connection options:

      - ``username``: The Kerbos principal to authenticate. Percent-encode this value before including
        it in a connection URI.
      - ``authMechanism``: Set to ``"GSSAPI"``.
      - ``password``: Optional. If the user to authenticate is different from the user
        that owns the application process, set this option to the authenticating user's
        password.
      - ``authMechanismProperties``: Optional. This option includes multiple
        authentication properties. To specify more than one of the following properties,
        use a comma-delimited list.
        
        - ``SERVICE_NAME:`` By default, MongoDB uses ``mongodb`` as
          the authentication service name. Use this option to specify a different service name.
        - ``CANONICALIZE_HOST_NAME``: Whether to use the fully qualified domain name (FQDN)
          of the MongoDB host for the server principal.
        - ``SERVICE_REALM``: The service realm. Use this option when the user's
          realm is different from the service's realm.
      
      You can set these options in two ways: by passing arguments to the
      ``MongoClient`` constructor or through parameters in your connection string.

      .. tabs::

         .. tab:: MongoClient
            :tabid: mongoclient

            .. code-block:: python

               client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                            username="mongodbuser@EXAMPLE.COM",
                                            authMechanism="GSSAPI",
                                            password="<user password>",
                                            authMechanismProperties="SERVICE_NAME:<authentication service name>,
                                                CANONICALIZE_HOST_NAME:true,
                                                SERVICE_REALM:<service realm>")

         .. tab:: Connection String
            :tabid: connectionstring

            .. code-block:: python

               uri = ("mongodb://mongodbuser%40EXAMPLE.COM:<percent-encoded user password>"
                      "@<hostname>:<port>/?"
                      "&authMechanism=GSSAPI"
                      "&authMechanismProperties="
                        "SERVICE_NAME:<authentication service name>,"
                        "CANONICALIZE_HOST_NAME:true,"
                        "SERVICE_REALM:<service realm>")
               client = pymongo.MongoClient(uri)

.. _pymongo-sasl:

PLAIN SASL
----------

The PLAIN Simple Authentication and Security Layer (SASL), as defined
by `RFC 4616 <https://www.rfc-editor.org/rfc/rfc4616>`__, is a username-password
authentication mechanism often used with TLS or another encryption layer.

.. important::

   PLAIN SASL is a clear-text authentication mechanism. We strongly recommend that you
   use TLS/SSL with certificate validation when using PLAIN SASL to authenticate to MongoDB.

   To learn more about how to enable TLS for your connection, see :ref:`<pymongo-tls>`.

To authenticate with SASL, set the ``authMechanism`` connection option to ``PLAIN``.
You can set this option in two ways: by passing an argument to the
``MongoClient`` constructor or through a parameter in your connection string.

.. include:: /includes/authentication/auth-properties-commas.rst
   
.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      .. code-block:: python

         client = pymongo.MongoClient("mongodb://<hostname>:<port>",
                                      username="<db_username>",
                                      password="<db_password>",
                                      authMechanism="PLAIN",
                                      tls=True)

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: python

         uri = ("mongodb://<db_username>:<db_password>@<hostname>:<port>/?"
                "&authMechanism=PLAIN"
                "&tls=true")
         client = pymongo.MongoClient(uri)

.. _pymongo-mongodb-oidc:

MONGODB-OIDC
------------

.. important::

   The MONGODB-OIDC authentication mechanism requires {+mdb-server+} v7.0 or later running
   on a Linux platform.

{+driver-short+} supports OIDC authentication for **workload identities**. A workload
identity is an identity you assign to a software workload, such as an application,
service, script, or container, to authenticate and access other services and resources.

The following sections describe how to use the MONGODB-OIDC authentication mechanism to
authenticate to various platforms.

For more information about the MONGODB-OIDC authentication mechanism, see
:manual:`OpenID Connect Authentication </core/security-oidc/>` and
:manual:`MongoDB Server Parameters </reference/parameters/#mongodb-parameter-param.oidcIdentityProviders>`
in the {+mdb-server+} manual.

.. note:: 

   Because Python's Standard Library doesn't support asynchronous HTTP requests,
   all OIDC requests from {+driver-short+} are synchronous and block the ``asyncio`` loop.

.. _pymongo-mongodb-oidc-azure-imds:

Azure IMDS
~~~~~~~~~~

If your application runs on an Azure VM, or otherwise uses the
`Azure Instance Metadata Service <https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service>`__
(IMDS), you can authenticate to MongoDB by using {+driver-short+}'s built-in Azure
support.

You can configure OIDC for Azure IMDS in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. include:: /includes/authentication/auth-properties-commas.rst

.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      First, create a Python dictionary for your authentication mechanism properties, as shown
      in the following example. Replace the ``<audience>`` placeholder with the
      value of the ``audience`` parameter configured on your MongoDB deployment. 
      
      The following code example shows how to set these options in your connection string:
      
      .. literalinclude:: /includes/authentication/azure-imds-mongoclient.py
         :language: python
         :copyable: true
         :start-after: # define properties and MongoClient
         :end-before: client = MongoClient(

      Then, set the following connection options:

      - ``username``: If you're using an Azure managed identity, set this to the client ID
        of the managed identity. If you're using a service principal to represent an
        enterprise application, set this to the application ID of the service principal. 
      - ``authMechanism``: Set to ``"MONGODB-OIDC"``.
      - ``authMechanismProperties``: Set to the ``properties`` dictionary that you
        created in the previous step.

      The following code example shows how to set these options when creating a
      ``MongoClient``:

      .. literalinclude:: /includes/authentication/azure-imds-mongoclient.py
            :language: python
            :copyable: true
            :emphasize-lines: 5-10

   .. tab:: Connection String
      :tabid: connectionstring

      Include the following connection options in your connection string:

      - ``username``: If you're using an Azure managed identity, set this to the client ID
        of the managed identity. If you're using a service principal to represent an
        enterprise application, set this to the application ID of the service principal. 
      - ``authMechanism``: Set to ``MONGODB-OIDC``.
      - ``authMechanismProperties``: Set to
        ``ENVIRONMENT:azure,TOKEN_RESOURCE:<audience>``.
        Replace the ``<audience>`` placeholder with the
        value of the ``audience`` parameter configured on your MongoDB deployment. 
        
        The following code example shows how to set these options in your connection string:
      
      .. literalinclude:: /includes/authentication/azure-imds-connection-string.py
            :language: python
            :copyable: true
            :emphasize-lines: 4-7

.. tip::
   
   If your application is running on an Azure VM, and only one managed identity is
   associated with the VM, you can omit the ``username`` connection option.

.. _pymongo-mongodb-oidc-gcp-imds:

GCP IMDS
~~~~~~~~

If your application runs on a Google Compute Engine VM, or otherwise uses the
`GCP Instance Metadata Service <https://cloud.google.com/compute/docs/metadata/querying-metadata>`__,
you can authenticate to MongoDB by using {+driver-short+}'s built-in GCP
support.

You can configure OIDC for GCP IMDS in two ways: by passing arguments to the
``MongoClient`` constructor or through parameters in your connection string.

.. include:: /includes/authentication/auth-properties-commas.rst
   
.. tabs::

   .. tab:: MongoClient
      :tabid: mongoclient

      First, create a Python dictionary for your authentication mechanism properties, as shown
      in the following example. Replace the ``<audience>`` placeholder with
      the value of the ``audience`` parameter configured on your MongoDB deployment.

      .. literalinclude:: /includes/authentication/gcp-imds-mongoclient.py
         :language: python
         :copyable: true
         :start-after: # define properties and MongoClient
         :end-before: client = MongoClient(

      Then, set the following connection options:

      - ``authMechanism``: Set to ``"MONGODB-OIDC"``.
      - ``authMechanismProperties``: Set to the ``properties`` dictionary that you
        created in the previous step.

      The following code example shows how to set these options when creating a
      ``MongoClient``:

      .. literalinclude:: /includes/authentication/gcp-imds-mongoclient.py
            :language: python
            :copyable: true
            :emphasize-lines: 5-9

   .. tab:: Connection String
      :tabid: connectionstring

      Include the following connection options in your connection string:

      - ``authMechanism``: Set to ``MONGODB-OIDC``.
      - ``authMechanismProperties``: Set to
        ``ENVIRONMENT:gcp,TOKEN_RESOURCE:<audience>``.
        Replace the ``<audience>`` placeholder with the
        value of the ``audience`` parameter configured on your MongoDB deployment.

      The following code example shows how to set these options in your connection string:
      
      .. literalinclude:: /includes/authentication/gcp-imds-connection-string.py
            :language: python
            :copyable: true
            :emphasize-lines: 4-6

.. _pymongo-mongodb-oidc-azure-envs:

Other Azure Environments
~~~~~~~~~~~~~~~~~~~~~~~~

If your application runs on Azure Functions, App Service Environment (ASE), or Azure
Kubernetes Service (AKS), you can use the
`azure-identity <https://pypi.org/project/azure-identity/>`__ package to fetch
authentication credentials.

First, use pip to install the ``azure-identity`` library, as shown in the
following example:

.. code-block:: sh

   python3 -m pip install azure-identity

Next, define a class that inherits from the ``OIDCCallback`` class. This class must
implement a ``fetch()`` method, which returns the OIDC token in the form of an
``OIDCCallbackResult`` object.

The following example shows how to define a callback class named ``MyCallback``. This class
includes a ``fetch()`` method that retrieves an OIDC token from a file in the standard
service-account token-file location.

.. literalinclude:: /includes/authentication/azure-envs-mongoclient.py
   :language: python
   :copyable: true
   :start-after: # define callback, properties, and MongoClient
   :end-before: properties = {"OIDC_CALLBACK": MyCallback()}

After you define your callback class, create a Python dictionary that contains one key,
``"OIDC_CALLBACK"``, whose value is an instance of your custom callback class:

.. literalinclude:: /includes/authentication/azure-envs-mongoclient.py
   :language: python
   :copyable: true
   :start-after: return OIDCCallbackResult(access_token=token)
   :end-before: client = MongoClient(

Finally, set the following connection options by passing arguments to the ``MongoClient``
constructor:

- ``authMechanism``: Set to ``"MONGODB-OIDC"``.
- ``authMechanismProperties``: Set to the ``properties`` dictionary that you created in the
  previous step.

.. literalinclude:: /includes/authentication/azure-envs-mongoclient.py
      :language: python
      :copyable: true
      :emphasize-lines: 14-18

.. _pymongo-mongodb-oidc-gcp-gke:

GCP GKE
~~~~~~~

If your application runs on a GCP Google Kubernetes Engine (GKE) cluster with a
`configured service account <https://cloud.google.com/kubernetes-engine/docs/how-to/service-accounts>`__,
you can read the OIDC token from the standard service-account token-file location.

First, define a class that inherits from the ``OIDCCallback`` class. This class must
implement a ``fetch()`` method, which returns the OIDC token in the form of an
``OIDCCallbackResult`` object.

The following example shows how to define a callback class named ``MyCallback``. This class
includes a ``fetch()`` method that retrieves an OIDC token from a file in the standard
service-account token-file location.

.. literalinclude:: /includes/authentication/gcp-gke-mongoclient.py
   :language: python
   :copyable: true
   :start-after: # define callback, properties, and MongoClient
   :end-before: properties = {"OIDC_CALLBACK": MyCallback()}

After you define your callback class, create a Python dictionary that contains one key,
``"OIDC_CALLBACK"``, whose value is an instance of your custom callback class:

.. literalinclude:: /includes/authentication/gcp-gke-mongoclient.py
   :language: python
   :copyable: true
   :start-after: return OIDCCallbackResult(access_token=token)
   :end-before: client = MongoClient(

Finally, set the following connection options by passing arguments to the ``MongoClient``
constructor:

- ``authMechanism``: Set to ``"MONGODB-OIDC"``.
- ``authMechanismProperties``: Set to the ``properties`` dictionary that you created
  in the previous step.

.. literalinclude:: /includes/authentication/gcp-gke-mongoclient.py
      :language: python
      :copyable: true
      :emphasize-lines: 11-15

API Documentation
-----------------

To learn more about using enterprise authentication mechanisms with {+driver-short+},
see the following API documentation:

- `MongoClient <{+api-root+}pymongo/mongo_client.html#pymongo.mongo_client.MongoClient>`__
- `OIDCCallback <{+api-root+}pymongo/auth_oidc.html#pymongo.auth_oidc.OIDCCallback>`__
