.. _csharp-update-one:

================
Update Documents
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: synchronous, asynchronous

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to update the
values of fields in MongoDB documents.

The {+driver-short+} provides the following methods to update fields:

- ``UpdateOne()`` or ``UpdateOneAsync()``

.. tip:: Interactive Lab
   
   This page includes a short interactive lab that demonstrates how to
   modify data by using the ``UpdateManyAsync()`` method. You can complete this
   lab directly in your browser window without installing MongoDB or a code editor.

   To start the lab, click the :guilabel:`Open Interactive Tutorial` button at the
   top of the page. To expand the lab to a full-screen format, click the
   full-screen button (:guilabel:`â›¶`) in the top-right corner of the lab pane.

.. note:: Method Overloads

   Many of the methods in this guide have multiple overloads. The examples
   in this guide use the simplest overload for demonstration purposes. For
   more information about the available overloads, see the
   :manual:`{+new-api-root+} API documentation </api-reference>`.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection
from the ``sample_restaurants`` database. The documents in this
collection use the following ``Restaurant``, ``Address``, and ``GradeEntry`` 
classes as models:

.. literalinclude:: /includes/code-examples/Restaurant.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/Address.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/GradeEntry.cs
   :language: csharp
   :copyable:
   :dedent:

.. include:: /includes/convention-pack-note.rst

This collection is from the :atlas:`sample datasets </sample-data>` provided
by Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster
and load this sample data.

.. _csharp-update-operation:

Update Methods and Parameters
------------------------------

To update one or more fields in a MongoDB document, call the ``UpdateOne()`` or
``UpdateOneAsync()`` method. These methods accept the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``filter``
     - A *query filter* that specifies the document to update. You can use the
       ``Builders`` class to create a query filter. For more information about
       query filters, see the
       :manual:`{+mdb-server+} manual </core/document/#query-filter-documents>`.

       **Data Type:** `FilterDefinition<TDocument> <{+new-api-root+>/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

   * - ``update``
     - An instance of the ``UpdateDefinition`` class. This object specifies the kind of update
       operation, the fields to update, and the new value for each field. You can use the
       ``Builders`` class to create an ``UpdateDefinition`` object.

       **Data Type:** `UpdateDefinition<TDocument> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateDefinition-1.html>`__

   * - ``options``
     - *Optional.* An instance of the ``UpdateOptions`` class that specifies the
       configuration for the update operation. The default value is ``null``.

       **Data Type:** `UpdateOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateOptions.html>`__

   * - ``cancellationToken``
     - *Optional.* A token that you can use to cancel the operation.

       **Data type**: `CancellationToken <https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken>`__

.. To update one or more documents in a MongoDB collection, perform the following steps:

.. 1. Create a query filter that specifies the documents to update. Link out to the query filter page.
.. #. Create an update definition that specifies the fields to update and the new values. Covered later.
.. #. Call the ``UpdateOne()`` or ``UpdateOneAsync()`` method to update the document.

The following sections describe how to create update definitions for different operations.

Single Values
-------------

The {+driver-short+} supports the field update operators described in the
:manual:`{+mdb-server+} manual </reference/operator/update/#fields>`. To specify an
update operation, call the corresponding method from the ``Builders.Update`` property. 
The following sections describe these methods in more detail.

Increment a Value
~~~~~~~~~~~~~~~~~

To increment the value of a field by a specific amount, call the ``Builders.Update.Inc()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to increment.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The amount to increment the field by.

       **Data Type:** ``TField``

Set If Lower or Greater
~~~~~~~~~~~~~~~~~~~~~~~

To update the value of the field to a specified value, *but only if the specified value
is greater than the current value of the field,* call the ``Builders.Update.Max()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The value to set the field to.

       **Data Type:** ``TField``

To update the value of the field to a specified value, *but only if the specified value
is lesser than the current value of the field,* call the ``Builders.Update.Min()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The value to set the field to.

       **Data Type:** ``TField``

Multiply a Value
~~~~~~~~~~~~~~~~

To multiply the value of a field by a specific amount, call the ``Builders.Update.Mul()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The amount to multiply the field by.

       **Data Type:** ``TField``

Rename a Field
~~~~~~~~~~~~~~

To rename a field, call the ``Builders.Update.Rename()`` method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to rename.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``newName``
     - The new name for the field.

       **Data Type:** ``string``

Set a Value
~~~~~~~~~~~

To set the value of a field to a specific value, call the ``Builders.Update.Set()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The value to set the field to.

       **Data Type:** ``TField``

Unset a Field
~~~~~~~~~~~~~

To remove a field from a document, call the ``Builders.Update.Unset()`` method. This method accepts the following parameter:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to remove.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

Set on Insert
~~~~~~~~~~~~~

To set the value of a field only if the document is an upsert, call the ``Builders.Update.SetOnInsert()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``value``
     - The value to set the field to.

       **Data Type:** ``TField``

Set the Current Date
~~~~~~~~~~~~~~~~~~~~

To set the value of a field to the current date and time, call the ``Builders.Update.CurrentDate()``
method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the field to update.

       **Data Type:** ``Expression<Func<TDocument, TField>>``

   * - ``type``
     - The format of the date and time, defined in the ``UpdateDefinitionCurrentDateType``
       enum. The default value is ``null``.

       **Data Type:** `UpdateDefinitionCurrentDateType? <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateDefinitionCurrentDateType.html>`__

The following code example performs these steps:

1. Creates a query filter that matches documents where the value of the ``name`` field
   is "Bagels N Buns".
#. Creates an update definition that sets the value of the ``name`` field to "2 Bagels 2 Buns".
#. Calls the ``UpdateOne()`` method to update the document.

Select  the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding
code.

.. tabs::

   .. tab:: Synchronous
      :tabid: update-one-sync

      .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
         :language: csharp
         :copyable: true
         :dedent:
         :start-after: // start-update-one
         :end-before: // end-update-one

   .. tab:: Asynchronous
      :tabid: update-one-async

      .. literalinclude:: /includes/code-examples/update-one/UpdateOneAsync.cs
         :language: csharp
         :copyable: true
         :dedent:
         :start-after: // start-update-one-async
         :end-before: // end-update-one-async

.. tip:: Aggregation Pipelines in Update Operations

   If you are using MongoDB Version 4.2 or later, you can use aggregation
   pipelines made up of a subset of aggregation stages in update operations. For
   more information on the aggregation stages MongoDB supports in
   aggregation pipelines used in update operations, see the tutorial about building
   :manual:`updates with aggregation pipelines </tutorial/update-documents-with-aggregation-pipeline/>`.

Arrays
------

The {+driver-short+} supports the array update operators and modifiers described in the
:manual:`{+mdb-server+} manual </reference/operator/update/#array>`.
To specify an update operation, call the corresponding method from the ``Builders.Update``
property. The following sections describe these methods in more detail.

Add One Value
~~~~~~~~~~~~~

To add one value to the end of an array, call the ``Builders.Update.Push()`` method.
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``value``
     - The value to add to the end of the array field. 

       **Data Type:** ``TItem`` 

The following code example pushes a new ``GradeEntry`` object into the ``Grades``
array in the matching document. Select the :guilabel:`Synchronous` or
:guilabel:`Asynchronous` tab to see the corresponding code.

.. tabs::

   .. tab:: Synchronous
      :tabid: update-one-array-sync

      .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
         :language: csharp
         :copyable: true
         :dedent:
         :start-after: // start-update-one-array
         :end-before: // end-update-one-array

   .. tab:: Asynchronous
      :tabid: update-one-array-async

      .. literalinclude:: /includes/code-examples/update-one/UpdateOne.cs
         :language: csharp
         :copyable: true
         :dedent:
         :start-after: // start-update-one-array-async
         :end-before: // end-update-one-array-async

To add one value to the end of an array, *but only if it doesn't already exist in the array*,
call the ``Builders.Update.AddToSet()`` method.
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``value``
     - The value to add to the end of the array field.

       **Data Type:** ``TItem`` 

The following code example pushes a new ``GradeEntry`` object into the ``Grades``
array in the matching document. Select the :guilabel:`Synchronous` or
:guilabel:`Asynchronous` tab to see the corresponding code.

.. tip:: Specify a Position
  
   To add a value at a specific position in an array, call the ``PushEach()`` method.

Add Multiple Values
~~~~~~~~~~~~~~~~~~~

To add multiple values to an array, call the ``Builders.Update.PushEach()`` method.
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``values``
     - The values to add to the array field.

       **Data Type:** ``IEnumerable<TItem>``

   * - ``slice``
     - The number of elements to keep in the array. If the value is negative, the
        method keeps the specified number of elements from the end of the array.

       **Data Type:** ``int?``

   * - ``position``
     - The position in the array at which to add the values.

       **Data Type:** ``int?``

   * - ``sort``
     - The values to add to the array field.

      **Data Type:** `SortDefinition<TItem> <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.SortDefinition-1.html>`__

To add multiple values to an array only if they aren't there, call the
``Builders.Update.AddToSetEach()`` method. This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``values``
     - The values to add to the array field.

       **Data Type:** ``IEnumerable<TItem>``

Remove Values
~~~~~~~~~~~~~

To remove the first value from an array, call the ``Builders.Update.PopFirst()`` method.
This method accepts the following parameter:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to remove the first value from.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

To remove the last value from an array, call the ``Builders.Update.PopLast()`` method:
This method accepts the following parameter:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to remove the last value from.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

To remove all instances of a specific value from an array, call the ``Builders.Update.Pull()`` method:
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``value``
     - The value to remove from the array field.

       **Data Type:** ``IEnumerable<TItem>``

To remove all instances of more than one specific value from an array, call the ``Builders.Update.PullAll()`` method:
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``values``
     - The values to remove from the array field.

       **Data Type:** ``IEnumerable<TItem>``

To remove all values that match a specific condition from an array, call the ``Builders.Update.PullFilter()`` method:
This method accepts the following parameters:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``field``
     - An expression that specifies the array field to add to.

       **Data Type:** ``Expression<Func<TDocument, IEnumerable<TItem>>>``

   * - ``filter``
     - A query filter that specifies the condition for values to remove.

       **Data Type:** `FilterDefinition<TItem> <{+new-api-root+>/MongoDB.Driver/MongoDB.Driver.FilterDefinition-1.html>`__

Update Matching Elements
~~~~~~~~~~~~~~~~~~~~~~~~

To query and update specific elements in an array field, use
the :manual:`positional operator </reference/operator/update/positional/#mongodb-update-up.->` (``$``)
when you specify the field to update.
Combined with the ``Builders.Update.Set()`` method, you can use this operator to query
and update specific elements in an array field.

To update the first array element that matches your query filter, use the
positional ``$`` operator. The array value must appear be part of the query filter.

The following code example queries the ``restaurants`` collection for a document
that contains a grade of 2. It then updates that grade to 22 in the matching documents.
Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code.

To update all array elements in the matching documents, use the all positional operator
(``$[]``).

The following code example queries the ``restaurants`` collection for a document
where the ``name`` is ``"Downtown Deli"``. It then updates all that grade to 22 in the matching documents.
Select the :guilabel:`Synchronous` or :guilabel:`Asynchronous` tab to see the corresponding code.

To update all array elements that match your query filter, use the all positional operator
(``$[]``). The array value must appear be part of the query filter.

The following code example queries the ``restaurants`` collection for a document
that contains a grade of 2. It then updates that grade to 22 in the matching documents.

Customize the Update Operation
------------------------------

The preceding update methods optionally accept an ``UpdateOptions`` object as an additional
parameter. You can use this argument to configure the update operation.

The ``UpdateOptions`` class contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``ArrayFilters``
     - Specifies which array elements to modify for an update operation on an array field.
       See :manual:`the MongoDB server manual</reference/command/update/#update-elements-match-arrayfilters-criteria>`
       for more information.

       **Data Type:** IEnumerable<`ArrayFilterDefinition <{+new-api-root+>/MongoDB.Driver/MongoDB.Driver.ArrayFilterDefinition.html>`__>

   * - ``BypassDocumentValidation``
     - Specifies whether the update operation bypasses document validation. This lets you 
       update documents that don't meet the schema validation requirements, if any 
       exist. See :manual:`the MongoDB server manual</core/schema-validation/#schema-validation>`
       for more information on schema validation.

       **Data Type:** ``bool?``

   * - ``Collation``
     - Specifies the kind of language collation to use when sorting
       results. See :manual:`the MongoDB server manual</reference/collation/#std-label-collation>`
       for more information on collation.

       **Data Type:** `Collation <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.Collation.html>`__

   * - ``Comment``
     - Gets or sets the user-provided comment for the operation. 
       See :manual:`the MongoDB server manual</reference/command/update/#command-fields>`
       for more information.

       **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__

   * - ``Hint``
     - Gets or sets the index to use to scan for documents. 
       See :manual:`the MongoDB server manual</reference/command/update/#std-label-update-command-hint>`
       for more information.

       **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__

   * - ``IsUpsert``
     - Specifies whether the update operation performs an upsert operation if no 
       documents match the query filter. 
       See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-command-upsert>`
       for more information.

       **Data Type:** ``bool``

   * - ``Let``
     - Gets or sets the let document. 
       See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-let-syntax>`
       for more information.

       **Data Type:** `BsonDocument <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonDocument.html>`__

Return Value
------------

The ``UpdateOne()`` and ``UpdateMany()`` methods return an ``UpdateResult`` 
object. The ``UpdateOneAsync()`` and ``UpdateManyAsync()`` methods return an asynchronous
version of this type, a ``Task<UpdateResult>`` object.
The ``UpdateResult`` class contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``IsAcknowledged``
     - Indicates whether the replace operation was acknowledged by MongoDB.

       **Data Type:** ``bool``
   
   * - ``IsModifiedCountAvailable``
     - Indicates whether you can read the count of replaced records on the
       ``ReplaceOneResult``.

       **Data Type:** ``bool``

   * - ``MatchedCount``
     - The number of documents that matched the query filter, regardless of
       whether one was replaced. 

       **Data Type:** ``long``

   * - ``ModifiedCount``
     - The number of documents replaced by the replace operation. 

       **Data Type:** ``long``

   * - ``UpsertedId``
     - The ID of the document that was upserted in the database, if the driver
       performed an upsert.

      **Data Type:** `BsonValue <{+new-api-root+}/MongoDB.Bson/MongoDB.Bson.BsonValue.html>`__

Example
-------

The following code uses the ``UpdateMany()`` method to find all documents where the 
``borough`` field has the value "Manhattan", then updates the ``borough``
value in these documents to "Manhattan (north)". Because the ``IsUpsert`` option is 
set to ``true``, the driver inserts a new document if the query filter doesn't 
match any existing documents.

.. io-code-block::
   :copyable: true

   .. input::
      :language: csharp

        var filter = Builders<Restaurant>.Filter
            .Eq(restaurant => restaurant.Borough, "Manhattan");
            
        var update = Builders<Restaurant>.Update
            .Set(restaurant => restaurant.Borough, "Manhattan (north)");

        UpdateOptions opts = new UpdateOptions()
        {
            Comment = new BsonString("Borough updated for C# Driver Fundamentals"),
            IsUpsert = true
        };

        Console.WriteLine("Updating documents...");
        var result = _restaurantsCollection.UpdateMany(filter, update, opts);
      
        Console.WriteLine($"Updated documents: {result.ModifiedCount}");
        Console.WriteLine($"Result acknowledged? {result.IsAcknowledged}");

   .. output::
      :language: none
      :visible: false
      
      Updating documents...
      Updated documents: 10259
      Result acknowledged? True

Multiple Updates
----------------

To combine multiple update definitions into one, call the ``Builders.Update.Combine()`` method.
This method accepts the following parameter:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Parameter
     - Description

   * - ``updates``
     - An array of update definitions to combine.

       **Data Type:** ``UpdateDefinition<TDocument>[]``

This method returns a single ``UpdateDefinition`` object, which you can then pass to the
``UpdateOne()`` or ``UpdateMany()`` method.

.. _csharp-change-info:

Additional Information
----------------------

For runnable examples of the update operations, see the following usage
examples:

- :ref:`csharp-update-one`
- :ref:`csharp-update-many`

To learn more about creating query filters, see the :ref:`csharp-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

* `UpdateOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOne.html>`__
* `UpdateOneAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOneAsync.html>`__
* `UpdateMany() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateMany.html>`__
* `UpdateManyAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateManyAsync.html>`__
* `UpdateOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateOptions.html>`__
* `UpdateResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateResult.html>`__

.. _csharp-update-instruqt-lab:

.. instruqt:: /mongodb-docs/tracks/update-a-document---c-net-driver?token=em_69t_l-j0BC_en7Uy
   :title: UpdateManyAsync() Lesson
   :drawer: