.. _csharp-count-documents:

===============
Count Documents
===============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to get an :ref:`accurate
<csharp-accurate-count>` and :ref:`estimated <csharp-estimated-count>` count of
the number of documents in your collection.

Sample Data
~~~~~~~~~~~

The examples in this guide use the following documents in a collection called
``grades``:

.. code-block:: json
 
   { "_id": 1, "name": "Spongebob", "finalGrade": 87.5}
   { "_id": 2, "name": "Patrick", "finalGrade": 12.3}
   { "_id": 3, "name": "Squidward", "finalGrade": 99.0}
   { "_id": 4, "name": "Sandy", "finalGrade": 85.5}
   { "_id": 5, "name": "Plankton", "finalGrade": 72.3}
   { "_id": 6, "name": "Karen", "finalGrade": 88.8}

The following ``FinalGrades`` class models the documents in this
collection.

.. literalinclude:: /includes/code-examples/count-documents/FinalGrades.cs
   :start-after: start-grades-struct
   :end-before: end-grades-struct
   :language: csharp
   :dedent:

.. note::

   The documents in the ``grades`` collection use the camel-case naming
   convention. The examples in this guide use a ``ConventionPack``
   to deserialize the fields in the collection into Pascal case and map them to
   the properties in the ``FinalGrades`` class. 

   To learn more about custom serialization, see
   :ref:`csharp-custom-serialization`. 
   
.. _csharp-accurate-count:

Accurate Count
--------------

To count the number of documents that match your :ref:`query filter <csharp-specify-query>`, use the
``CountDocuments()`` method. If you pass an empty query filter, this method
returns the total number of documents in the collection.

Example 
```````

The following example counts the number of documents where the
``finalGrade`` is less than ``80``:

.. io-code-block::
   :copyable: true

   .. input::
      :language: csharp

      var filter = Builders<BsonDocument>.Filter.Lt("finalGrade", 80);
      var count = coll.CountDocuments(filter);
      
      Console.WriteLine("Number of documents with a final grade less
      than 80: " + count);

   .. output::
      :language: none
      :visible: false

      Number of documents with a final grade less than 80: 2

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of ``CountDocuments()`` by passing in a
``CountOptions`` type. If you don't specify any options, the driver uses
its default values.

The ``CountOptions`` type allows you to configure options with the
following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``Collation``
     - | The type of language collation to use when sorting results.  
       | Default: ``nil``

   * - ``Hint`` 
     - | The index to use to scan for documents to count. 
       | Default: ``nil``

   * - ``Limit`` 
     - | The maximum number of documents to count. 
       | Default: ``0`` 

   * - ``MaxTime``
     - | The maximum amount of time that the query can run on the server.
       | Default: ``nil``

   * - ``Skip`` 
     - | The number of documents to skip before counting.
       | Default: ``0``

.. tip::

   When you use ``CountDocuments()`` to return the total number of documents in a
   collection, MongoDB performs a collection scan. You can avoid a collection scan and
   improve the performance of this method by using a hint to take advantage of the built-in index on
   the ``_id`` field. Use this technique only when calling ``CountDocuments()``
   with an empty query parameter.

   .. code-block:: csharp
      :emphasize-lines: 1, 3

      var filter = Builders<BsonDocument>.Filter.Empty;

      CountOptions opts = new CountOptions(){Hint = "_id_"};
      var counter = collection.CountDocuments(filter, opts);

.. _csharp-estimated-count:

Estimated Count
---------------

To estimate the number of documents in your collection without the use
of a filter, use the
``EstimatedDocumentCount()`` method. 

.. note:: 

    The ``EstimatedDocumentCount()`` method is quicker than the
    ``CountDocuments()`` method because it uses the collection's
    metadata rather than scanning the entire collection. 

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of ``EstimatedDocumentCount()`` by passing
in an ``EstimatedDocumentCountOptions`` type. If you don't specify any
options, the driver uses its default values.

The ``EstimatedDocumentCountOptions`` type allows you to configure
options with the following property:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``MaxTime``
     - | The maximum amount of time that the query can run on the server.
       | Default: ``nil``

Example
```````

The following example estimates the number of documents in the
``ratings`` collection:

.. io-code-block::
   :copyable: true

   .. input::
      :language: csharp

      var count = collection.EstimatedDocumentCount();
      String output = String.Format("Estimated number of documents in
      the grades collection: " + count);
      Console.WriteLine(output);

   .. output::
      :language: none
      :visible: false

      Estimated number of documents in the grades collection: 6

.. _csharp-count-aggregation:

Aggregation
-----------

You can also include the :manual:`$count </reference/operator/aggregation/count/>`
stage to count the number of documents in an aggregation pipeline.

Example
~~~~~~~

The following example performs the following actions:

- Counts the number of documents where the ``rating`` is greater than ``5``
- Assigns the count to the ``counted_documents`` field

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      matchStage := bson.D{{"$match", bson.D{{"rating", bson.D{{"$gt", 5}}}}}}
      countStage := bson.D{{"$count", "counted_documents"}}

      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage, countStage})
      if err != nil {
         panic(err)
      }

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      [{counted_documents 5}]

Additional Information
----------------------

To learn more about the operations mentioned, see the following
guides:

- :ref:`golang-query-document`
- :ref:`golang-skip`
- :ref:`golang-limit`
- :ref:`golang-aggregation` 
- :ref:`golang-collations`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__
- `CountOptions <{+api+}/mongo/options#CountOptions>`__
- `EstimatedDocumentCount() <{+api+}/mongo#Collection.EstimatedDocumentCount>`__
- `EstimatedDocumentCountOptions <{+api+}/mongo/options#EstimatedDocumentCountOptions>`__
