.. _csharp-poco:

===============
Work with POCOs
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn about how you can use "Plain Old CLR/Class
Objects", or **POCOs**, with the {+driver-short+} for your operations
and queries. POCOs are simple class objects which do not inherit
features from any framework-specific base class and do not return any
special types. We recommend using POCOs in your {+language+} code to
adhere to idiomatic driver usage and achieve the best performance.

You should read this guide if you want to learn more about how to use
POCOs with the {+driver-short+} or need to adjust the driver's default
field mapping behavior.

Define a POCO
-------------

You can define a POCO by instantiating any simple class that does not
implement interfaces or extend classes from a framework. When you
execute an operation such as a read or write using a POCO, the driver
interally *serializes*, or converts, the POCO to BSON.

Select the :guilabel:`POCO` or :guilabel:`BSON` tab to see how the
driver serializes an sample POCO to BSON:

.. tabs::

   .. tab:: POCO
      :tabid: poco-representation

      .. code-block:: csharp
         :copyable: false

         public class Clothing
         {
             public ObjectId _id { get; set; }
             public string name { get; set; }
             public bool instock { get; set; }
             public double price { get; set; }
             public List<string> color { get; set; }
         }

   .. tab:: BSON
      :tabid: bson-representation

      .. code-block:: json
         :copyable: false

         {
           "_id": ObjectId("..."),
           "name": "Long Sleeve Shirt",
           "instock": true,
           "price": 18,
           "color": [ "black", "navy", "red" ]
         }

You can define a POCO with any object structure that suits your
needs, including nested objects, arrays, lists, and any data types. The
driver serializes POCOs using default mapping rules to generate the
appropriate BSON representation of the document.

Custom Serialization
--------------------

If the default field mapping behavior does not meet your needs, you can
specify custom behavior using serialization related attributes. There
are various attributes which you can specify to modify the way that the
driver serializes each property of your POCO. This section describes
some of the common serialization related attributes.

Set Field Names
~~~~~~~~~~~~~~~

The driver serializes POCO properties to BSON fields with same field
name and capitalization. To store a property under a different name, you
can use the ``BsonElementAttribute``. The following code shows how you
can direct the driver to store the ``YearBuilt`` property of the
``House`` object as ``year_built`` in the serialized BSON document:

.. code-block:: csharp
   :copyable: true

   public class House
   {
       public ObjectId Id { get; set; }

       [BsonElement("year_built")]
       public int YearBuilt { get; set; }
   }

Select Type Representation
~~~~~~~~~~~~~~~~~~~~~~~~~~

For some {+language+} primitive types you can control the BSON type used
to represent the value of your POCO property using the
``BsonRepresentationAttribute``. The following code shows how you can
specify that the ``YearBuilt`` property, defined as a ``char`` in
{+language+} is serialized as a BSON ``Int32`` type:

.. code-block:: csharp
   :copyable: true

   public class House
   {
       public ObjectId Id { get; set; }

       [BsonRepresentation(BsonType.Int32)]
       public char YearBuilt { get; set; }
   }

Set Field Order
~~~~~~~~~~~~~~~

The driver serializes POCO properties to BSON fields in the order they
are specified in the POCO. To store properties in a custom order, you
can specify the ``Order`` named parameter in the ``BsonElement``
attribute. The following code shows how you can direct the driver to
store the ``YearBuilt`` property of the ``House`` object after the
``Style`` property:

.. code-block:: csharp
   :copyable: true

   public class House
   {
       public ObjectId Id { get; set; }

       [BsonElement(Order = 2)]
       public int YearBuilt { get; set; }

       [BsonElement(Order = 1)]
       public string Style { get; set; }
   }

Any properties that do not have an explicit ``Order`` will occur after
those that do.

Identify Id Property
~~~~~~~~~~~~~~~~~~~~

By default, the driver uses any public property named ``Id``, ``id``, or ``_id`` as the
identifier to map to the ``_id`` field. You can explicitly select the
identifier using the ``BsonIdAttribute``. The following code shows how
you can direct the driver to map the ``Identifier`` property of the
``House`` object to the ``_id`` field:

.. code-block:: csharp
   :copyable: true

   public class House
   {
       [BsonId]
       public string Identifier { get; set; }
   }

Omit Empty Fields
~~~~~~~~~~~~~~~~~

By default, the driver serializes undefined properties to field with ``null``
values. You can direct the driver to ignore empty properties using the
``BsonIgnoreAttribute``. The following code shows how you can prevent
the driver from serializing the ``YearBuilt`` property if it is empty:

.. code-block:: csharp
   :copyable: true

   public class House
   {
       public ObjectId Id { get; set; }

       [BsonIgnore]
       public int YearBuilt { get; set; }
       public string Style { get; set; }
   }

Example
-------

The following example shows how the {+driver-short+} inserts a document
instantiated as a POCO with the following custom field mapping specifications:

- Sets a custom field name ``in_stock`` for the ``instock`` property
- Serializes the ``price`` field as a BSON ``Double``

Define the ``Clothing`` class with the relevant serialization
attributes:

.. literalinclude:: ../includes/fundamentals/code-examples/poco.cs
   :start-after: start-model
   :end-before: end-model
   :language:  csharp
   :copyable:
   :dedent:

Instantiate a ``Clothing`` object and insert the document into a collection:

.. literalinclude:: ../includes/fundamentals/code-examples/poco.cs
   :start-after: start-insert
   :end-before: end-insert
   :language:  csharp
   :copyable:
   :dedent:

The BSON representation of the inserted document should resemble the
following:

.. code-block:: json
   :copyable: false

   {
     "_id": ObjectId("..."),
     "name": "Denim Jacket",
     "in_stock": false,
     "price": 32.99,
     "color": [ "dark wash", "light wash" ]
   }

Additional Information
----------------------

For a full list of serialization related attributes, see the
`Serialization.Attributes API documentation <{+api-root+}/N_MongoDB_Bson_Serialization_Attributes.htm>`__.

For additional read and write operation examples using POCOs, see the :ref:`Usage Examples
<csharp-usage-examples>` or the :ref:`CRUD Fundamentals Pages <csharp-crud>`.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `BsonElementAttribute <{+api-root+}/T_MongoDB_Bson_Serialization_Attributes_BsonElementAttribute.htm>`__
- `BsonRepresentationAttribute <{+api-root+}/T_MongoDB_Bson_Serialization_Attributes_BsonRepresentationAttribute.htm>`__
- `BsonIdAttribute <{+api-root+}/T_MongoDB_Bson_Serialization_Attributes_BsonIdAttribute.htm>`__
- `BsonIgnoreAttribute <{+api-root+}/T_MongoDB_Bson_Serialization_Attributes_BsonIgnoreAttribute.htm>`__
- `InsertOne() <{+api-root+}/M_MongoDB_Driver_IMongoCollection_1_InsertOne.htm>`__