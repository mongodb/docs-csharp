.. _csharp-aggregation-match:

=====
Match
=====

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, transform, pipeline

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Match
-----

Use the ``match()`` method to create a :manual:`$match </reference/operator/aggregation/match/>`
pipeline stage that matches incoming documents against the specified
query filter, filtering out documents that do not match.

.. tip::

   The filter can be an instance of any class that implements ``Bson``, but it's
   convenient to combine with use of the :ref:`Filters <filters-builders>` class.

The following example creates a pipeline stage that matches all documents where the
``title`` field is equal to "The Shawshank Redemption":

.. literalinclude:: /includes/aggregation/Builders.cs
   :start-after: begin match
   :end-before: end match
   :language: csharp
   :dedent:


$match
~~~~~~

The ``$match`` aggregation stage returns the documents that match a specified
criteria. 

Select the :guilabel:`Method Syntax` or :guilabel:`Query Syntax` tab to see how 
to generate a ``$match`` stage using LINQ:

.. tabs::

   .. tab:: Method Syntax
      :tabid: method-syntax

      .. code-block:: csharp
         :emphasize-lines: 2

         var query = queryableCollection
             .Where(r => r.Name == "The Movable Feast");

   .. tab:: Query Syntax
      :tabid: query-syntax

      .. code-block:: csharp
         :emphasize-lines: 2

         var query = from r in queryableCollection
             where r.Name == "The Movable Feast"
             select r;

The result of the preceding example contains the following document:

.. code-block:: json

    // Results Truncated

    { "_id" : ObjectId(...), "name" : "The Movable Feast", "restaurant_id" : "40361606", "cuisine" : "American", "address" : {...}, "borough" : "Brooklyn", "grades" : [...] }
