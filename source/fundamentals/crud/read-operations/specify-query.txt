.. _csharp-specify-query:

===============
Specify a Query
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to specify a query to match a subset
of documents using the {+driver-long+}.

Most CRUD (Create, Read, Update, Delete) operations allow you to narrow the set
of matched documents by passing a **query filter** as an argument to the driver
method. A query filter is an expression that specifies the documents you want to
retrieve in your query. 

.. note:: Using LINQ

   You can also specify queries using LINQ. To learn more about using LINQ, see
   :ref:`csharp-linq`.

The examples in this guide use the following documents in a collection called
``guitars``.

.. code-block:: json
 
   { "_id": 1, "make": "Fender", "models": ["Stratocaster", "Telecaster"], "establishedYear": 1946, "rating": 9 }
   { "_id": 2, "make": "Gibson", "models": ["Les Paul", "SG", "Explorer"], "establishedYear": 1902, "rating": 8 }
   { "_id": 3, "make": "PRS", "models": ["Silver Sky", "SE", "Custom"], "establishedYear": 1985, "rating": 9 }
   { "_id": 4, "make": "Kiesel", "models": ["Ares", "Vader", "Solo"], "establishedYear": 2015 }
   { "_id": 5, "make": "Ibanez", "models": ["RG", "AZ"], "establishedYear": 1957, "rating": 7 }
   { "_id": 6, "make": "Strandberg", "models": ["Boden", "Salen"], "establishedYear": 1982 }

The following ``Guitar`` class models the documents in this collection. The 
{+driver-short+} uses this class to automatically map these documents to and 
from BSON.

.. TODO: Add link to Automapping page.

.. literalinclude:: /includes/fundamentals/code-examples/specify-query/Guitar.cs
   :language: csharp
   :copyable:
   :dedent:

Literal Values
--------------

Literal value queries return documents with an exact match to your query filter.

The following example specifies a query filter as a parameter to the ``Find()`` 
method, using the ``Guitar`` class. The query matches all documents where the
``make`` field equals "Fender".

.. io-code-block::
   :copyable:

   .. input:: /includes/fundamentals/code-examples/specify-query/FindEqPOCO.cs
      :language:  csharp

   .. output:: 
      :language: json
      :visible:

      { "_id" : 1, "make" : "Fender", "models" : ["Stratocaster", "Telecaster"], "establishedYear" : 1946, "rating" : 9 }

The following example creates a query filter using builders that matches all 
documents where the ``make`` field equals "Fender".

.. io-code-block::
   :copyable:

   .. input:: /includes/fundamentals/code-examples/specify-query/FindEqBuilder.cs
      :language:  csharp

   .. output:: 
      :language: json
      :visible:

      { "_id" : 1, "make" : "Fender", "models" : ["Stratocaster", "Telecaster"], "establishedYear" : 1946, "rating" : 9 }

.. tip:: Find All Documents

   Using an empty query filter matches all documents in the collection. Create
   an empty query filter with builders as follows:

   .. code-block:: csharp

      var result = _guitarsCollection.Find(Builders<Guitar>.Filter.Empty).ToList();

To learn more about using builders, see :ref:`csharp-builders`.

Comparison Operators
--------------------

Comparison operators analyze the value in a document against the specified value
in your query filter. Common comparison operators include:

.. list-table::
   :widths: 30 30 40
   :header-rows: 1

   * - Expression
     - Builder
     - Description

   * - ``>``
     - ``Gt()``
     - Greater than

   * - ``<=``
     - ``Lt()``
     - Less than or equal to

   * - ``!=``
     - ``Ne()``
     - Not equal to

For a full list of comparison operators, see the :manual:`Comparison
Query Operators </reference/operator/query-comparison/>` page.

The following example specifies a query filter as a parameter to the ``Find()``
method, using the ``Guitar`` class. The query matches all documents where the
``establishedYear`` field is greater than ``1985``.

.. io-code-block::
   :copyable:

   .. input:: /includes/fundamentals/code-examples/specify-query/FindGtPOCO.cs
      :language:  csharp

   .. output::
      :language: json
      :visible:

      { "_id" : 4, "make" : "Kiesel", "models" : ["Ares", "Vader", "Solo"], "establishedYear" : 2015, "rating" : null }

The following example uses builders to create a query filter that matches all 
documents where the ``establishedYear`` field is greater than ``1985``.

.. io-code-block::
   :copyable:

   .. input:: /includes/fundamentals/code-examples/specify-query/FindGtBuilder.cs
      :language:  csharp

   .. output:: 
      :language: json
      :visible:

      { "_id" : 1, "make" : "Fender", "models" : ["Stratocaster", "Telecaster"], "establishedYear" : 1946, "rating" : 9 }


To learn more about using builders, see :ref:`csharp-builders`.

Logical Operators
-----------------

Logical operators query data using logic applied to the results of two or more
sets of search criteria. Common logical operators include:

.. list-table::
   :widths: 30 30 40
   :header-rows: 1

   * - Expression
     - Builder
     - Description

   * - ``&&``
     - ``And()``
     - All sets of search criteria must be true.

   * - ``||``
     - ``Or()``
     - At least one of set of search criteria must be true.

For a full list of logical operators, see the :manual:`Logical
Query Operators </reference/operator/query-logical/>` page. 

The following example specifies a query filter as a parameter to the ``Find()`` 
method, using the ``Guitar`` class. The query matches all documents where the
``establishedYear`` field is greater than or equal to ``1985``, and the ``make``
field is not equal to "Kiesel".

.. io-code-block::
   :copyable:

   .. input:: /includes/fundamentals/code-examples/specify-query/FindAndPOCO.cs
      :language:  csharp

   .. output::
      :language: json
      :visible:

      { "_id" : 3, "make" : "PRS", "models" : ["Silver Sky", "SE", "Custom"], "establishedYear" : 1985, "rating" : 9 }


The following example uses builders to creates a query filter that matches all 
documents where the ``establishedYear`` field is greater than or equal to ``1985``,
and the ``make`` field is not equal to "Kiesel".

.. io-code-block::
   :copyable:

   .. input:: /includes/fundamentals/code-examples/specify-query/FindAndBuilder.cs
      :language:  csharp

   .. output:: 
      :language: json
      :visible:

      { "_id" : 3, "make" : "PRS", "models" : ["Silver Sky", "SE", "Custom"], "establishedYear" : 1985, "rating" : 9 }

To learn more about using builders, see :ref:`csharp-builders`.

Array Operators
---------------

Array operators query data based on the value or quantity of elements in an array
field. Array operators include ``All()``, ``Any()``, and ``Size()``.

.. note:: 

   The {+driver-long+} translates the ``Any()`` operator to the MongoDB ``$elemMatch``
   query selector.

   To learn more about the ``$elemMatch`` query selector, see
   :manual:`$elemMatch </reference/operator/query/elemMatch/#mongodb-query-op.-elemMatch>`.

For more information on the array operators, see the :manual:`Array
Query Operators </reference/operator/query-array/>` page.

The following example uses builders to create a query filter that matches all
documents that have 3 elements in the ``models`` field.

.. io-code-block::
   :copyable:

   .. input:: /includes/fundamentals/code-examples/specify-query/FindSizeBuilder.cs
      :language:  csharp

   .. output::
      :language: json
      :visible:

      { "_id" : 2, "make" : "Gibson", "models" : ["Les Paul", "SG", "Explorer"], "establishedYear" : 1902, "rating" : 8 }
      { "_id" : 3, "make" : "PRS", "models" : ["Silver Sky", "SE", "Custom"], "establishedYear" : 1985, "rating" : 9 }
      { "_id" : 4, "make" : "Kiesel", "models" : ["Ares", "Vader", "Solo"], "establishedYear" : 2015, "rating" : null }

To learn more about using builders, see :ref:`csharp-builders`.

Element Operators
-----------------

Element operators query data based on the presence or type of a field.

For a full list of element operators, see the :manual:`Element
Query Operators </reference/operator/query-element/>` page.

The following example uses builders to create a query filter that matches all
documents that have a ``rating`` field.

.. io-code-block::
   :copyable:

   .. input:: /includes/fundamentals/code-examples/specify-query/FindExistsBuilder.cs
      :language:  csharp

   .. output::
      :language: json
      :visible:

      { "_id" : 1, "make" : "Fender", "models" : ["Stratocaster", "Telecaster"], "establishedYear" : 1946, "rating" : 9 }
      { "_id" : 2, "make" : "Gibson", "models" : ["Les Paul", "SG", "Explorer"], "establishedYear" : 1902, "rating" : 8 }
      { "_id" : 3, "make" : "PRS", "models" : ["Silver Sky", "SE", "Custom"], "establishedYear" : 1985, "rating" : 9 }
      { "_id" : 5, "make" : "Ibanez", "models" : ["RG", "AZ"], "establishedYear" : 1957, "rating" : 7 }

To learn more about using builders, see :ref:`csharp-builders`.

Evaluation Operators
--------------------

Evaluation operators analyze data on individual fields, or on the entire collection's
documents. Common evaluation operators include ``Regex()`` and ``Text()``.

For a full list of evaluation operators, see the :manual:`Evaluation
Query Operators </reference/operator/query-evaluation/>` page.

The following example uses builders to create a query filter that matches all
documents that have a value in the ``make`` field that starts with the letter 
"G".

.. io-code-block::
   :copyable:

   .. input:: ../../../includes/fundamentals/code-examples/specify-query/FindRegexBuilder.cs
      :language:  csharp

   .. output::
      :language: json
      :visible:

      { "_id" : 2, "make" : "Gibson", "models" : ["Les Paul", "SG", "Explorer"], "establishedYear" : 1902, "rating" : 8 }

To learn more about using builders, see :ref:`csharp-builders`.

Additional Information
----------------------

For more information about the operators mentioned in this guide, see the 
following Server Manual Entries:

- :manual:`Comparison Query Operators </reference/operator/query-comparison/>`
- :manual:`Logical Query Operators </reference/operator/query-logical/>`
- :manual:`Array Query Operators </reference/operator/query-array/>`
- :manual:`Element Query Operators </reference/operator/query-element/>`
- :manual:`Evaluation Query Operators </reference/operator/query-evaluation/>`

To learn more about using Builders, see :ref:`csharp-builders`.

.. TODO: Add LINQ fundamentals page
To learn how to specify queries using LINQ, see :ref:`csharp-linq`.
