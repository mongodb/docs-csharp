.. _csharp-change-guide:

================
Modify Documents
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: update, replace, synchronous, asynchronous, bulk

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to modify
documents in a MongoDB collection by performing the following operations:

- :ref:`Update Operations <csharp-update-operation>`
- :ref:`Replace Operations <csharp-replace-operation>`

The {+driver-short+} provides the following methods to modify documents,
each of which has an asynchronous and synchronous version:

- ``UpdateOneAsync()`` or ``UpdateOne()``
- ``UpdateManyAsync()`` or ``UpdateMany()``
- ``ReplaceOneAsync()`` or ``ReplaceOne()``

.. tip:: Interactive Lab

   You can complete a short interactive lesson that demonstrates how to
   modify data by using the ``UpdateManyAsync()`` method in an in-browser coding
   experience. To learn more, see the :ref:`csharp-update-instruqt-lab`
   section of this guide.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection
from the ``sample_restaurants`` database. The documents in this
collection use the following ``Restaurant``, ``Address``, and ``GradeEntry`` 
classes as models:

.. literalinclude:: /includes/code-examples/Restaurant.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/Address.cs
   :language: csharp
   :copyable:
   :dedent:

.. literalinclude:: /includes/code-examples/GradeEntry.cs
   :language: csharp
   :copyable:
   :dedent:

.. include:: /includes/convention-pack-note.rst

This collection is from the :atlas:`sample datasets </sample-data>` provided
by Atlas. See the :ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster
and load this sample data.

.. _csharp-update-operation:

Update Operations
-----------------

You can perform update operations in MongoDB with the following methods:

- ``UpdateOne()``, which updates *the first document* that matches the search criteria
- ``UpdateMany()``, which updates *all documents* that match the search criteria

Required Parameters
~~~~~~~~~~~~~~~~~~~

Each update method requires the following parameters:

- A **query filter** document, which determines which records to update. See the 
  :manual:`MongoDB server manual </core/document/#query-filter-documents>` for 
  more information about query filters.
- An **update** document, which specifies the **update operator** (the kind of update to
  perform) and the fields and values that should change. See the 
  :manual:`Field Update Operators Manual page</reference/operator/update-field/>` for a complete 
  list of update operators and their usage. 

The {+driver-short+} provides a ``Builders`` class that simplifies the creation of both
query filters and update documents. The following code sample uses ``Builders`` to create
two documents for use as parameters in an update operation:

- A query filter that searches for restaurants with a ``cuisine`` field value of "Pizza" 
- An update document that sets the value of the ``cuisine`` field of these restaurants 
  to "Pasta and breadsticks"

.. literalinclude:: /includes/code-examples/update-many/UpdateMany.cs
   :language: csharp
   :dedent:
   :start-after: // start-update-many
   :end-before: // end-update-many

.. tip:: Aggregation Pipelines in Update Operations

   If you are using MongoDB Version 4.2 or later, you can use aggregation
   pipelines made up of a subset of aggregation stages in update operations. For
   more information on the aggregation stages MongoDB supports in
   aggregation pipelines used in update operations, see our tutorial on building
   :manual:`updates with aggregation pipelines </tutorial/update-documents-with-aggregation-pipeline/>`.

Update One Document
~~~~~~~~~~~~~~~~~~~

The following code shows how to use the asynchronous ``UpdateOneAsync()`` method 
or the synchronous ``UpdateOne()`` method to update one document.

.. tabs::

   .. tab:: Asynchronous
      :tabid: update-one-async

      .. code-block:: csharp
         :copyable: true

         var result = await _restaurantsCollection.UpdateOneAsync(filter, update);

   .. tab:: Synchronous
      :tabid: update-one-sync

      .. code-block:: csharp
         :copyable: true

         var result = _restaurantsCollection.UpdateOne(filter, update);

Update Many Documents
~~~~~~~~~~~~~~~~~~~~~

The following code shows how to use the asynchronous
``UpdateManyAsync()`` method or the synchronous ``UpdateMany()`` method to
update all matched documents.

.. tabs::

   .. tab:: Asynchronous
      :tabid: update-many-async

      .. code-block:: csharp
         :copyable: true

         var result = await _restaurantsCollection.UpdateManyAsync(filter, update);

   .. tab:: Synchronous
      :tabid: update-many-sync

      .. code-block:: csharp
         :copyable: true

         var result = _restaurantsCollection.UpdateMany(filter, update);

.. tip::

   Find runnable examples that use these methods under :ref:`Additional
   Information <csharp-change-info>`.

Customize the Update Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Both methods optionally accept an ``UpdateOptions`` object as an additional parameter,
which represents options you can use to configure the update operation.
If you don't specify any ``UpdateOptions`` properties, the driver does
not customize the update operation.

The ``UpdateOptions`` type allows you to configure options with the
following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``ArrayFilters``
     - | Specifies which array elements to modify for an update operation on an array field.
         See :manual:`the MongoDB server manual</reference/command/update/#update-elements-match-arrayfilters-criteria>`
         for more information.

   * - ``BypassDocumentValidation``
     - | Specifies whether the update operation bypasses document validation. This lets you 
         update documents that don't meet the schema validation requirements, if any 
         exist. See :manual:`the MongoDB server manual</core/schema-validation/#schema-validation>`
         for more information on schema validation.

   * - ``Collation``
     - | Specifies the kind of language collation to use when sorting
         results. See :manual:`the MongoDB server manual</reference/collation/#std-label-collation>`
         for more information on collation.

   * - ``Comment``
     - | Gets or sets the user-provided comment for the operation. 
         See :manual:`the MongoDB server manual</reference/command/update/#command-fields>`
         for more information.

   * - ``Hint``
     - | Gets or sets the index to use to scan for documents. 
         See :manual:`the MongoDB server manual</reference/command/update/#std-label-update-command-hint>`
         for more information.

   * - ``IsUpsert``
     - | Specifies whether the update operation performs an upsert operation if no 
         documents match the query filter. 
         See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-command-upsert>`
         for more information.

   * - ``Let``
     - | Gets or sets the let document. 
         See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-let-syntax>`
         for more information.

Return Value
~~~~~~~~~~~~

The ``UpdateOne()`` and ``UpdateMany()`` methods each return an ``UpdateResult`` 
object. The ``UpdateResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``IsAcknowledged``
     - | Indicates whether the update operation was acknowledged by MongoDB.

   * - ``IsModifiedCountAvailable``
     - | Indicates whether you can read the count of updated records on the
         ``UpdateResult``.

   * - ``MatchedCount``
     - | The number of documents that matched the query filter, regardless of
         how many were updated.

   * - ``ModifiedCount``
     - | The number of documents updated by the update operation. If an updated
         document is identical to the original, it won't be included in this count.

   * - ``UpsertedId``
     - | The ID of the document that was upserted in the database, if the driver
         performed an upsert.

Example
~~~~~~~

The following code uses the ``UpdateMany()`` method to find all documents where the 
``borough`` field has the value "Manhattan", then updates the ``borough``
value in these documents to "Manhattan (north)". Because the ``IsUpsert`` option is 
set to ``true``, the driver inserts a new document if the query filter doesn't 
match any existing documents.

.. io-code-block::
   :copyable: true

   .. input::
      :language: csharp

        var filter = Builders<Restaurant>.Filter
            .Eq(restaurant => restaurant.Borough, "Manhattan");
            
        var update = Builders<Restaurant>.Update
            .Set(restaurant => restaurant.Borough, "Manhattan (north)");

        UpdateOptions opts = new UpdateOptions()
        {
            Comment = new BsonString("Borough updated for C# Driver Fundamentals"),
            IsUpsert = true
        };

        Console.WriteLine("Updating documents...");
        var result = _restaurantsCollection.UpdateMany(filter, update, opts);
      
        Console.WriteLine($"Updated documents: {result.ModifiedCount}");
        Console.WriteLine($"Result acknowledged? {result.IsAcknowledged}");

   .. output::
      :language: none
      :visible: false
      
      Updating documents...
      Updated documents: 10259
      Result acknowledged? True

.. note::

   If the preceding example used the ``UpdateOne()`` method instead of
   ``UpdateMany()``, the driver would update only the first of the
   matched documents.

.. _csharp-replace-operation:

Replace Operation
-----------------

You can perform a replace operation in MongoDB with the ``ReplaceOne()`` method. 
This method removes all fields (except the ``_id`` field) from the first document that
matches the search criteria, then inserts the fields and values you specify into the 
document.

Required Parameters
~~~~~~~~~~~~~~~~~~~

The ``ReplaceOne()`` method requires the following parameters:

- A query filter document, which determines which record to replace. 
- A **replacement** document, which specifies the fields and values to insert in the new 
  document. If the documents in your collection are mapped to a {+language+} class,
  the replacement document can be an instance of this class. 

Like in an update operation, you can use the ``Builders`` class in the {+driver-short+} 
to create a query filter. 
The following code sample uses ``Builders`` to create a query filter that searches 
for restaurants with a ``name`` field value of "Pizza Town". The code also creates a new 
``Restaurant`` object that will replace the first matched document. 

.. literalinclude:: /includes/code-examples/replace-one/ReplaceOne.cs
   :language: csharp
   :dedent:
   :start-after: // start-replace-one
   :end-before: // end-replace-one

.. important::

   The values of ``_id`` fields are immutable. If your replacement document specifies 
   a value for the ``_id`` field, it must match the ``_id`` value of the existing document.

The following code shows how to use the asynchronous ``ReplaceOneAsync()`` method 
or the synchronous ``ReplaceOne()`` method to replace one document.

.. tabs::

   .. tab:: Asynchronous
      :tabid: replace-one-async

      .. code-block:: csharp
         :copyable: true

         var result = await _restaurantsCollection.ReplaceOneAsync(filter, newRestaurant);

   .. tab:: Synchronous
      :tabid: replace-one-sync

      .. code-block:: csharp
         :copyable: true

         var result = _restaurantsCollection.ReplaceOne(filter, newRestaurant);

.. tip::

   Find runnable examples that use these methods under :ref:`Additional
   Information <csharp-change-info>`.

Customize the Replace Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``ReplaceOne()`` method optionally accepts a ``ReplaceOptions`` object as an 
additional parameter, which represents options you can use to configure the replace 
operation. If you don't specify any ``ReplaceOptions`` properties, the driver does
not customize the replace operation.

The ``ReplaceOptions`` type allows you to configure options with the
following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``BypassDocumentValidation``
     - | Specifies whether the replace operation bypasses document validation. This lets you 
         replace documents that don't meet the schema validation requirements, if any 
         exist. See :manual:`the MongoDB server manual</core/schema-validation/#schema-validation>`
         for more information on schema validation.

   * - ``Collation``
     - | Specifies the kind of language collation to use when sorting
         results. See :manual:`the MongoDB server manual</reference/collation/#std-label-collation>`
         for more information on collation.

   * - ``Comment``
     - | Gets or sets the user-provided comment for the operation. 
         See :manual:`the MongoDB server manual</reference/command/update/#command-fields>`
         for more information.

   * - ``Hint``
     - | Gets or sets the index to use to scan for documents. 
         See :manual:`the MongoDB server manual</reference/command/update/#std-label-update-command-hint>`
         for more information.

   * - ``IsUpsert``
     - | Specifies whether the replace operation performs an upsert operation if no 
         documents match the query filter. 
         See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-command-upsert>`
         for more information.

   * - ``Let``
     - | Gets or sets the let document. 
         See :manual:`the MongoDB server manual </reference/command/update/#std-label-update-let-syntax>`
         for more information.

Return Value
~~~~~~~~~~~~

The ``ReplaceOne()`` method returns a ``ReplaceOneResult`` 
object. The ``ReplaceOneResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``IsAcknowledged``
     - | Indicates whether the replace operation was acknowledged by MongoDB.

   * - ``IsModifiedCountAvailable``
     - | Indicates whether you can read the count of replaced records on the
         ``ReplaceOneResult``.

   * - ``MatchedCount``
     - | The number of documents that matched the query filter, regardless of
         whether one was replaced. 

   * - ``ModifiedCount``
     - | The number of documents replaced by the replace operation. 

   * - ``UpsertedId``
     - | The ID of the document that was upserted in the database, if the driver
         performed an upsert.

Example
~~~~~~~

The following code uses the ``ReplaceOne()`` method to find the first document where the 
``name`` field has the value "Pizza Town", then replaces this document 
with a new ``Restaurant`` document named "Food World". Because the ``IsUpsert`` option is 
set to ``true``, the driver inserts a new document if the query filter doesn't 
match any existing documents.

.. io-code-block::
   :copyable: true

   .. input::
      :language: csharp

      var filter = Builders<Restaurant>.Filter.Eq(restaurant => restaurant.Name, "Pizza Town");

      Restaurant newRestaurant = new()
      {
          Name = "Food World",
          Cuisine = "American",
          Address = new BsonDocument
          {
              {"street", "Food St"},
              {"zipcode", "10003"},
          },
          Borough = "Manhattan",
      };

      ReplaceOptions opts = new ReplaceOptions()
      {
          Comment = new BsonString("Restaurant replaced for {+driver-short+} Fundamentals"),
          IsUpsert = true
      };

      Console.WriteLine("Replacing document...");
      var result = _restaurantsCollection.ReplaceOne(filter, newRestaurant, opts);
      
      Console.WriteLine($"Replaced documents: {result.ModifiedCount}");
      Console.WriteLine($"Result acknowledged? {result.IsAcknowledged}"); 

   .. output::
      :language: none
      :visible: false
      
      Replacing document...
      Replaced documents: 1
      Result acknowledged? True

.. _csharp-update-instruqt-lab:

Complete an Interactive Lesson
------------------------------

This lab helps you understand how to use the {+driver-short+} to perform
update operations in MongoDB by using the ``UpdateManyAsync()`` method.
You can complete this lab directly in your browser window without
installing MongoDB or a code editor.

.. tip::
   
   To expand the lab to a full-screen format, click the full-screen
   button, :guilabel:`⛶`, in the bottom right corner of the lab pane.

.. instruqt:: /mongodb-docs/tracks/update-a-document---c-net-driver?token=em_69t_l-j0BC_en7Uy
   :title: UpdateManyAsync() Lesson

.. _csharp-change-info:

Additional Information
----------------------

For runnable examples of the update and replace operations, see the following usage
examples:

- :ref:`csharp-update-one`
- :ref:`csharp-update-many`
- :ref:`csharp-replace-one`

To learn more about creating query filters, see the :ref:`csharp-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

* `UpdateOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOne.html>`__
* `UpdateOneAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateOneAsync.html>`__
* `UpdateMany() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateMany.html>`__
* `UpdateManyAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.UpdateManyAsync.html>`__
* `UpdateOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateOptions.html>`__
* `UpdateResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.UpdateResult.html>`__
* `ReplaceOne() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.ReplaceOne.html>`__
* `ReplaceOneAsync() <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.IMongoCollection-1.ReplaceOneAsync.html>`__
* `ReplaceOptions <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReplaceOptions.html>`__
* `ReplaceOneResult <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.ReplaceOneResult.html>`__
